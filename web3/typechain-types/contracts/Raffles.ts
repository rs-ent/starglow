/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Raffles {
  export type PrizeStruct = {
    prizeType: BigNumberish;
    collectionAddress: AddressLike;
    registeredTicketQuantity: BigNumberish;
    pickedTicketQuantity: BigNumberish;
    order: BigNumberish;
    rarity: BigNumberish;
    prizeQuantity: BigNumberish;
    startTicketNumber: BigNumberish;
    title: string;
    description: string;
    imageUrl: string;
    iconUrl: string;
    assetId: string;
    tokenIds: BigNumberish[];
  };

  export type PrizeStructOutput = [
    prizeType: bigint,
    collectionAddress: string,
    registeredTicketQuantity: bigint,
    pickedTicketQuantity: bigint,
    order: bigint,
    rarity: bigint,
    prizeQuantity: bigint,
    startTicketNumber: bigint,
    title: string,
    description: string,
    imageUrl: string,
    iconUrl: string,
    assetId: string,
    tokenIds: bigint[]
  ] & {
    prizeType: bigint;
    collectionAddress: string;
    registeredTicketQuantity: bigint;
    pickedTicketQuantity: bigint;
    order: bigint;
    rarity: bigint;
    prizeQuantity: bigint;
    startTicketNumber: bigint;
    title: string;
    description: string;
    imageUrl: string;
    iconUrl: string;
    assetId: string;
    tokenIds: bigint[];
  };

  export type RaffleBasicInfoStruct = {
    title: string;
    description: string;
    imageUrl: string;
    iconUrl: string;
    bestPrize: Raffles.PrizeStruct;
  };

  export type RaffleBasicInfoStructOutput = [
    title: string,
    description: string,
    imageUrl: string,
    iconUrl: string,
    bestPrize: Raffles.PrizeStructOutput
  ] & {
    title: string;
    description: string;
    imageUrl: string;
    iconUrl: string;
    bestPrize: Raffles.PrizeStructOutput;
  };

  export type RaffleTimingStruct = {
    startDate: BigNumberish;
    endDate: BigNumberish;
    instantDraw: boolean;
    drawDate: BigNumberish;
  };

  export type RaffleTimingStructOutput = [
    startDate: bigint,
    endDate: bigint,
    instantDraw: boolean,
    drawDate: bigint
  ] & {
    startDate: bigint;
    endDate: bigint;
    instantDraw: boolean;
    drawDate: bigint;
  };

  export type RaffleSettingsStruct = {
    dynamicWeight: boolean;
    participationLimit: BigNumberish;
    participationLimitPerPlayer: BigNumberish;
  };

  export type RaffleSettingsStructOutput = [
    dynamicWeight: boolean,
    participationLimit: bigint,
    participationLimitPerPlayer: bigint
  ] & {
    dynamicWeight: boolean;
    participationLimit: bigint;
    participationLimitPerPlayer: bigint;
  };

  export type RaffleFeeStruct = {
    participationFeeAsset: string;
    participationFeeAssetId: string;
    participationFeeAmount: BigNumberish;
  };

  export type RaffleFeeStructOutput = [
    participationFeeAsset: string,
    participationFeeAssetId: string,
    participationFeeAmount: bigint
  ] & {
    participationFeeAsset: string;
    participationFeeAssetId: string;
    participationFeeAmount: bigint;
  };

  export type RaffleCreateParamsStruct = {
    basicInfo: Raffles.RaffleBasicInfoStruct;
    timing: Raffles.RaffleTimingStruct;
    settings: Raffles.RaffleSettingsStruct;
    fee: Raffles.RaffleFeeStruct;
    prizes: Raffles.PrizeStruct[];
  };

  export type RaffleCreateParamsStructOutput = [
    basicInfo: Raffles.RaffleBasicInfoStructOutput,
    timing: Raffles.RaffleTimingStructOutput,
    settings: Raffles.RaffleSettingsStructOutput,
    fee: Raffles.RaffleFeeStructOutput,
    prizes: Raffles.PrizeStructOutput[]
  ] & {
    basicInfo: Raffles.RaffleBasicInfoStructOutput;
    timing: Raffles.RaffleTimingStructOutput;
    settings: Raffles.RaffleSettingsStructOutput;
    fee: Raffles.RaffleFeeStructOutput;
    prizes: Raffles.PrizeStructOutput[];
  };

  export type LotteryResultStruct = {
    player: AddressLike;
    claimed: boolean;
    lotteryTicketNumber: BytesLike;
    raffleId: BigNumberish;
    prizeIndex: BigNumberish;
    drawnAt: BigNumberish;
    claimedAt: BigNumberish;
  };

  export type LotteryResultStructOutput = [
    player: string,
    claimed: boolean,
    lotteryTicketNumber: string,
    raffleId: bigint,
    prizeIndex: bigint,
    drawnAt: bigint,
    claimedAt: bigint
  ] & {
    player: string;
    claimed: boolean;
    lotteryTicketNumber: string;
    raffleId: bigint;
    prizeIndex: bigint;
    drawnAt: bigint;
    claimedAt: bigint;
  };

  export type RaffleStatusStruct = {
    isActive: boolean;
    isDrawn: boolean;
    totalQuantity: BigNumberish;
    drawnParticipantCount: BigNumberish;
  };

  export type RaffleStatusStructOutput = [
    isActive: boolean,
    isDrawn: boolean,
    totalQuantity: bigint,
    drawnParticipantCount: bigint
  ] & {
    isActive: boolean;
    isDrawn: boolean;
    totalQuantity: bigint;
    drawnParticipantCount: bigint;
  };

  export type RaffleStruct = {
    basicInfo: Raffles.RaffleBasicInfoStruct;
    timing: Raffles.RaffleTimingStruct;
    settings: Raffles.RaffleSettingsStruct;
    fee: Raffles.RaffleFeeStruct;
    status: Raffles.RaffleStatusStruct;
    prizes: Raffles.PrizeStruct[];
  };

  export type RaffleStructOutput = [
    basicInfo: Raffles.RaffleBasicInfoStructOutput,
    timing: Raffles.RaffleTimingStructOutput,
    settings: Raffles.RaffleSettingsStructOutput,
    fee: Raffles.RaffleFeeStructOutput,
    status: Raffles.RaffleStatusStructOutput,
    prizes: Raffles.PrizeStructOutput[]
  ] & {
    basicInfo: Raffles.RaffleBasicInfoStructOutput;
    timing: Raffles.RaffleTimingStructOutput;
    settings: Raffles.RaffleSettingsStructOutput;
    fee: Raffles.RaffleFeeStructOutput;
    status: Raffles.RaffleStatusStructOutput;
    prizes: Raffles.PrizeStructOutput[];
  };

  export type RaffleCoreInfoStruct = {
    title: string;
    imageUrl: string;
    iconUrl: string;
    startDate: BigNumberish;
    endDate: BigNumberish;
    drawDate: BigNumberish;
    instantDraw: boolean;
    participationLimit: BigNumberish;
    participationLimitPerPlayer: BigNumberish;
    participationFeeAssetId: string;
    participationFeeAmount: BigNumberish;
    raffleId: BigNumberish;
    isActive: boolean;
    isDrawn: boolean;
    totalQuantity: BigNumberish;
    participationCount: BigNumberish;
    defaultBestPrize: Raffles.PrizeStruct;
    currentBestPrize: Raffles.PrizeStruct;
  };

  export type RaffleCoreInfoStructOutput = [
    title: string,
    imageUrl: string,
    iconUrl: string,
    startDate: bigint,
    endDate: bigint,
    drawDate: bigint,
    instantDraw: boolean,
    participationLimit: bigint,
    participationLimitPerPlayer: bigint,
    participationFeeAssetId: string,
    participationFeeAmount: bigint,
    raffleId: bigint,
    isActive: boolean,
    isDrawn: boolean,
    totalQuantity: bigint,
    participationCount: bigint,
    defaultBestPrize: Raffles.PrizeStructOutput,
    currentBestPrize: Raffles.PrizeStructOutput
  ] & {
    title: string;
    imageUrl: string;
    iconUrl: string;
    startDate: bigint;
    endDate: bigint;
    drawDate: bigint;
    instantDraw: boolean;
    participationLimit: bigint;
    participationLimitPerPlayer: bigint;
    participationFeeAssetId: string;
    participationFeeAmount: bigint;
    raffleId: bigint;
    isActive: boolean;
    isDrawn: boolean;
    totalQuantity: bigint;
    participationCount: bigint;
    defaultBestPrize: Raffles.PrizeStructOutput;
    currentBestPrize: Raffles.PrizeStructOutput;
  };

  export type UserParticipationDetailStruct = {
    participantId: BigNumberish;
    ticketNumber: BytesLike;
    participatedAt: BigNumberish;
    hasLotteryResult: boolean;
    resultId: BigNumberish;
    prizeIndex: BigNumberish;
    claimed: boolean;
    drawnAt: BigNumberish;
    claimedAt: BigNumberish;
  };

  export type UserParticipationDetailStructOutput = [
    participantId: bigint,
    ticketNumber: string,
    participatedAt: bigint,
    hasLotteryResult: boolean,
    resultId: bigint,
    prizeIndex: bigint,
    claimed: boolean,
    drawnAt: bigint,
    claimedAt: bigint
  ] & {
    participantId: bigint;
    ticketNumber: string;
    participatedAt: bigint;
    hasLotteryResult: boolean;
    resultId: bigint;
    prizeIndex: bigint;
    claimed: boolean;
    drawnAt: bigint;
    claimedAt: bigint;
  };

  export type UserParticipationInfoStruct = {
    participationCount: BigNumberish;
    participations: Raffles.UserParticipationDetailStruct[];
  };

  export type UserParticipationInfoStructOutput = [
    participationCount: bigint,
    participations: Raffles.UserParticipationDetailStructOutput[]
  ] & {
    participationCount: bigint;
    participations: Raffles.UserParticipationDetailStructOutput[];
  };
}

export interface RafflesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "admins"
      | "batchDraw"
      | "createRaffle"
      | "draw"
      | "getLotteryResult"
      | "getRaffle"
      | "getRaffleCoreInfo"
      | "getRaffleParticipants"
      | "getUserParticipationDetails"
      | "isAdmin"
      | "lotteryResults"
      | "owner"
      | "participants"
      | "participate"
      | "participateAndDraw"
      | "paused"
      | "playerParticipantIds"
      | "playerParticipationCount"
      | "processRefund"
      | "raffleParticipants"
      | "raffles"
      | "removeAdmin"
      | "renounceOwnership"
      | "setPaused"
      | "setRaffleActive"
      | "ticketToResultId"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "ContractPaused"
      | "ContractUnpaused"
      | "LotteryDrawn"
      | "OwnershipTransferred"
      | "Participated"
      | "ParticipatedAndDrawn"
      | "RaffleCreated"
      | "RaffleStatusChanged"
      | "RefundProcessed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "batchDraw",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRaffle",
    values: [Raffles.RaffleCreateParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "draw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleCoreInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleParticipants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserParticipationDetails",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "participate",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "participateAndDraw",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerParticipantIds",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerParticipationCount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processRefund",
    values: [BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleParticipants",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raffles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setRaffleActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketToResultId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchDraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "draw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRaffle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleCoreInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserParticipationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lotteryResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participateAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerParticipantIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerParticipationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raffles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRaffleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketToResultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractPausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractUnpausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LotteryDrawnEvent {
  export type InputTuple = [
    resultId: BigNumberish,
    raffleId: BigNumberish,
    player: AddressLike,
    participantId: BigNumberish,
    prizeIndex: BigNumberish,
    ticketNumber: BytesLike,
    randomValue: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    resultId: bigint,
    raffleId: bigint,
    player: string,
    participantId: bigint,
    prizeIndex: bigint,
    ticketNumber: string,
    randomValue: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    resultId: bigint;
    raffleId: bigint;
    player: string;
    participantId: bigint;
    prizeIndex: bigint;
    ticketNumber: string;
    randomValue: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipatedEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    player: AddressLike,
    participantId: BigNumberish,
    ticketNumber: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    raffleId: bigint,
    player: string,
    participantId: bigint,
    ticketNumber: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    raffleId: bigint;
    player: string;
    participantId: bigint;
    ticketNumber: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipatedAndDrawnEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    player: AddressLike,
    participantId: BigNumberish,
    prizeIndex: BigNumberish,
    resultId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    raffleId: bigint,
    player: string,
    participantId: bigint,
    prizeIndex: bigint,
    resultId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    raffleId: bigint;
    player: string;
    participantId: bigint;
    prizeIndex: bigint;
    resultId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaffleCreatedEvent {
  export type InputTuple = [raffleId: BigNumberish];
  export type OutputTuple = [raffleId: bigint];
  export interface OutputObject {
    raffleId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaffleStatusChangedEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    isActive: boolean,
    admin: AddressLike
  ];
  export type OutputTuple = [
    raffleId: bigint,
    isActive: boolean,
    admin: string
  ];
  export interface OutputObject {
    raffleId: bigint;
    isActive: boolean;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundProcessedEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    player: AddressLike,
    processedBy: AddressLike,
    method: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    raffleId: bigint,
    player: string,
    processedBy: string,
    method: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    raffleId: bigint;
    player: string;
    processedBy: string;
    method: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Raffles extends BaseContract {
  connect(runner?: ContractRunner | null): Raffles;
  waitForDeployment(): Promise<this>;

  interface: RafflesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  batchDraw: TypedContractMethod<
    [raffleId: BigNumberish, startIndex: BigNumberish, maxCount: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;

  createRaffle: TypedContractMethod<
    [params: Raffles.RaffleCreateParamsStruct],
    [bigint],
    "nonpayable"
  >;

  draw: TypedContractMethod<
    [raffleId: BigNumberish, participantId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getLotteryResult: TypedContractMethod<
    [resultId: BigNumberish],
    [Raffles.LotteryResultStructOutput],
    "view"
  >;

  getRaffle: TypedContractMethod<
    [raffleId: BigNumberish],
    [Raffles.RaffleStructOutput],
    "view"
  >;

  getRaffleCoreInfo: TypedContractMethod<
    [raffleId: BigNumberish],
    [Raffles.RaffleCoreInfoStructOutput],
    "view"
  >;

  getRaffleParticipants: TypedContractMethod<
    [raffleId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getUserParticipationDetails: TypedContractMethod<
    [raffleId: BigNumberish, player: AddressLike],
    [Raffles.UserParticipationInfoStructOutput],
    "view"
  >;

  isAdmin: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  lotteryResults: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, string, bigint, bigint, bigint, bigint] & {
        player: string;
        claimed: boolean;
        lotteryTicketNumber: string;
        raffleId: bigint;
        prizeIndex: bigint;
        drawnAt: bigint;
        claimedAt: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  participants: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint] & {
        player: string;
        raffleId: bigint;
        lotteryTicketNumber: string;
        participatedAt: bigint;
      }
    ],
    "view"
  >;

  participate: TypedContractMethod<
    [raffleId: BigNumberish, player: AddressLike],
    [bigint],
    "nonpayable"
  >;

  participateAndDraw: TypedContractMethod<
    [raffleId: BigNumberish, player: AddressLike],
    [
      [bigint, bigint, bigint] & {
        participantId: bigint;
        prizeIndex: bigint;
        resultId: bigint;
      }
    ],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  playerParticipantIds: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  playerParticipationCount: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  processRefund: TypedContractMethod<
    [raffleId: BigNumberish, player: AddressLike, method: string],
    [void],
    "nonpayable"
  >;

  raffleParticipants: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  raffles: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        Raffles.RaffleBasicInfoStructOutput,
        Raffles.RaffleTimingStructOutput,
        Raffles.RaffleSettingsStructOutput,
        Raffles.RaffleFeeStructOutput,
        Raffles.RaffleStatusStructOutput
      ] & {
        basicInfo: Raffles.RaffleBasicInfoStructOutput;
        timing: Raffles.RaffleTimingStructOutput;
        settings: Raffles.RaffleSettingsStructOutput;
        fee: Raffles.RaffleFeeStructOutput;
        status: Raffles.RaffleStatusStructOutput;
      }
    ],
    "view"
  >;

  removeAdmin: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  setRaffleActive: TypedContractMethod<
    [raffleId: BigNumberish, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  ticketToResultId: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchDraw"
  ): TypedContractMethod<
    [raffleId: BigNumberish, startIndex: BigNumberish, maxCount: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createRaffle"
  ): TypedContractMethod<
    [params: Raffles.RaffleCreateParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "draw"
  ): TypedContractMethod<
    [raffleId: BigNumberish, participantId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLotteryResult"
  ): TypedContractMethod<
    [resultId: BigNumberish],
    [Raffles.LotteryResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRaffle"
  ): TypedContractMethod<
    [raffleId: BigNumberish],
    [Raffles.RaffleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRaffleCoreInfo"
  ): TypedContractMethod<
    [raffleId: BigNumberish],
    [Raffles.RaffleCoreInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRaffleParticipants"
  ): TypedContractMethod<[raffleId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserParticipationDetails"
  ): TypedContractMethod<
    [raffleId: BigNumberish, player: AddressLike],
    [Raffles.UserParticipationInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lotteryResults"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, string, bigint, bigint, bigint, bigint] & {
        player: string;
        claimed: boolean;
        lotteryTicketNumber: string;
        raffleId: bigint;
        prizeIndex: bigint;
        drawnAt: bigint;
        claimedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "participants"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint] & {
        player: string;
        raffleId: bigint;
        lotteryTicketNumber: string;
        participatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "participate"
  ): TypedContractMethod<
    [raffleId: BigNumberish, player: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "participateAndDraw"
  ): TypedContractMethod<
    [raffleId: BigNumberish, player: AddressLike],
    [
      [bigint, bigint, bigint] & {
        participantId: bigint;
        prizeIndex: bigint;
        resultId: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "playerParticipantIds"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "playerParticipationCount"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "processRefund"
  ): TypedContractMethod<
    [raffleId: BigNumberish, player: AddressLike, method: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "raffleParticipants"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "raffles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        Raffles.RaffleBasicInfoStructOutput,
        Raffles.RaffleTimingStructOutput,
        Raffles.RaffleSettingsStructOutput,
        Raffles.RaffleFeeStructOutput,
        Raffles.RaffleStatusStructOutput
      ] & {
        basicInfo: Raffles.RaffleBasicInfoStructOutput;
        timing: Raffles.RaffleTimingStructOutput;
        settings: Raffles.RaffleSettingsStructOutput;
        fee: Raffles.RaffleFeeStructOutput;
        status: Raffles.RaffleStatusStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRaffleActive"
  ): TypedContractMethod<
    [raffleId: BigNumberish, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ticketToResultId"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ContractPaused"
  ): TypedContractEvent<
    ContractPausedEvent.InputTuple,
    ContractPausedEvent.OutputTuple,
    ContractPausedEvent.OutputObject
  >;
  getEvent(
    key: "ContractUnpaused"
  ): TypedContractEvent<
    ContractUnpausedEvent.InputTuple,
    ContractUnpausedEvent.OutputTuple,
    ContractUnpausedEvent.OutputObject
  >;
  getEvent(
    key: "LotteryDrawn"
  ): TypedContractEvent<
    LotteryDrawnEvent.InputTuple,
    LotteryDrawnEvent.OutputTuple,
    LotteryDrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Participated"
  ): TypedContractEvent<
    ParticipatedEvent.InputTuple,
    ParticipatedEvent.OutputTuple,
    ParticipatedEvent.OutputObject
  >;
  getEvent(
    key: "ParticipatedAndDrawn"
  ): TypedContractEvent<
    ParticipatedAndDrawnEvent.InputTuple,
    ParticipatedAndDrawnEvent.OutputTuple,
    ParticipatedAndDrawnEvent.OutputObject
  >;
  getEvent(
    key: "RaffleCreated"
  ): TypedContractEvent<
    RaffleCreatedEvent.InputTuple,
    RaffleCreatedEvent.OutputTuple,
    RaffleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RaffleStatusChanged"
  ): TypedContractEvent<
    RaffleStatusChangedEvent.InputTuple,
    RaffleStatusChangedEvent.OutputTuple,
    RaffleStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "RefundProcessed"
  ): TypedContractEvent<
    RefundProcessedEvent.InputTuple,
    RefundProcessedEvent.OutputTuple,
    RefundProcessedEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "ContractPaused()": TypedContractEvent<
      ContractPausedEvent.InputTuple,
      ContractPausedEvent.OutputTuple,
      ContractPausedEvent.OutputObject
    >;
    ContractPaused: TypedContractEvent<
      ContractPausedEvent.InputTuple,
      ContractPausedEvent.OutputTuple,
      ContractPausedEvent.OutputObject
    >;

    "ContractUnpaused()": TypedContractEvent<
      ContractUnpausedEvent.InputTuple,
      ContractUnpausedEvent.OutputTuple,
      ContractUnpausedEvent.OutputObject
    >;
    ContractUnpaused: TypedContractEvent<
      ContractUnpausedEvent.InputTuple,
      ContractUnpausedEvent.OutputTuple,
      ContractUnpausedEvent.OutputObject
    >;

    "LotteryDrawn(uint256,uint256,address,uint256,uint256,bytes32,uint256,uint256)": TypedContractEvent<
      LotteryDrawnEvent.InputTuple,
      LotteryDrawnEvent.OutputTuple,
      LotteryDrawnEvent.OutputObject
    >;
    LotteryDrawn: TypedContractEvent<
      LotteryDrawnEvent.InputTuple,
      LotteryDrawnEvent.OutputTuple,
      LotteryDrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Participated(uint256,address,uint256,bytes32,uint256)": TypedContractEvent<
      ParticipatedEvent.InputTuple,
      ParticipatedEvent.OutputTuple,
      ParticipatedEvent.OutputObject
    >;
    Participated: TypedContractEvent<
      ParticipatedEvent.InputTuple,
      ParticipatedEvent.OutputTuple,
      ParticipatedEvent.OutputObject
    >;

    "ParticipatedAndDrawn(uint256,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ParticipatedAndDrawnEvent.InputTuple,
      ParticipatedAndDrawnEvent.OutputTuple,
      ParticipatedAndDrawnEvent.OutputObject
    >;
    ParticipatedAndDrawn: TypedContractEvent<
      ParticipatedAndDrawnEvent.InputTuple,
      ParticipatedAndDrawnEvent.OutputTuple,
      ParticipatedAndDrawnEvent.OutputObject
    >;

    "RaffleCreated(uint256)": TypedContractEvent<
      RaffleCreatedEvent.InputTuple,
      RaffleCreatedEvent.OutputTuple,
      RaffleCreatedEvent.OutputObject
    >;
    RaffleCreated: TypedContractEvent<
      RaffleCreatedEvent.InputTuple,
      RaffleCreatedEvent.OutputTuple,
      RaffleCreatedEvent.OutputObject
    >;

    "RaffleStatusChanged(uint256,bool,address)": TypedContractEvent<
      RaffleStatusChangedEvent.InputTuple,
      RaffleStatusChangedEvent.OutputTuple,
      RaffleStatusChangedEvent.OutputObject
    >;
    RaffleStatusChanged: TypedContractEvent<
      RaffleStatusChangedEvent.InputTuple,
      RaffleStatusChangedEvent.OutputTuple,
      RaffleStatusChangedEvent.OutputObject
    >;

    "RefundProcessed(uint256,address,address,string,uint256)": TypedContractEvent<
      RefundProcessedEvent.InputTuple,
      RefundProcessedEvent.OutputTuple,
      RefundProcessedEvent.OutputObject
    >;
    RefundProcessed: TypedContractEvent<
      RefundProcessedEvent.InputTuple,
      RefundProcessedEvent.OutputTuple,
      RefundProcessedEvent.OutputObject
    >;
  };
}
