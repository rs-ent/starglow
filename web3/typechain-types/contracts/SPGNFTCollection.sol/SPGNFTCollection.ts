/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISPGNFT {
  export type InitParamsStruct = {
    name: string;
    symbol: string;
    baseURI: string;
    contractURI: string;
    maxSupply: BigNumberish;
    mintFee: BigNumberish;
    mintFeeToken: AddressLike;
    mintFeeRecipient: AddressLike;
    owner: AddressLike;
    mintOpen: boolean;
    isPublicMinting: boolean;
  };

  export type InitParamsStructOutput = [
    name: string,
    symbol: string,
    baseURI: string,
    contractURI: string,
    maxSupply: bigint,
    mintFee: bigint,
    mintFeeToken: string,
    mintFeeRecipient: string,
    owner: string,
    mintOpen: boolean,
    isPublicMinting: boolean
  ] & {
    name: string;
    symbol: string;
    baseURI: string;
    contractURI: string;
    maxSupply: bigint;
    mintFee: bigint;
    mintFeeToken: string;
    mintFeeRecipient: string;
    owner: string;
    mintOpen: boolean;
    isPublicMinting: boolean;
  };
}

export interface SPGNFTCollectionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BATCH_TRANSFER_TYPEHASH"
      | "TBAImplementation"
      | "TBARegistry"
      | "TRANSFER_PERMIT_TYPEHASH"
      | "addEscrowWallet"
      | "addMinter"
      | "approve"
      | "availableSupply"
      | "balanceOf"
      | "canMint"
      | "contractURI"
      | "eip712Domain"
      | "escrowTransfer"
      | "escrowTransferBatch"
      | "escrowTransferWithSignature"
      | "getApproved"
      | "getMintPrice"
      | "getNonce"
      | "getTBA"
      | "isApprovedForAll"
      | "isEscrowWallet"
      | "isPublicMinting"
      | "maxSupply"
      | "mint(address,uint256,string[])"
      | "mint(address,uint256)"
      | "mint(address)"
      | "mintFee"
      | "mintFeeRecipient"
      | "mintFeeToken"
      | "mintOpen"
      | "minters"
      | "name"
      | "nonces"
      | "owner"
      | "ownerOf"
      | "pause"
      | "paused"
      | "removeEscrowWallet"
      | "removeMinter"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setContractURI"
      | "setMintFee"
      | "setMintOpen"
      | "setPublicMinting"
      | "setTokenURI"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchEscrowTransfer"
      | "BatchMinted"
      | "ConsecutiveTransfer"
      | "EIP712DomainChanged"
      | "EscrowTransfer"
      | "EscrowWalletAdded"
      | "EscrowWalletRemoved"
      | "MintFeeChanged"
      | "MintStatusChanged"
      | "Minted"
      | "MinterAdded"
      | "MinterRemoved"
      | "OwnershipTransferred"
      | "Paused"
      | "PublicMintingStatusChanged"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BATCH_TRANSFER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TBAImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TBARegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addEscrowWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrowTransfer",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowTransferBatch",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowTransferWithSignature",
    values: [AddressLike, AddressLike, BigNumberish[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTBA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEscrowWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPublicMinting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint256,string[])",
    values: [AddressLike, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mintFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintFeeToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintOpen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeEscrowWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintOpen",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicMinting",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BATCH_TRANSFER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TBAImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TBARegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEscrowWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowTransferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowTransferWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTBA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEscrowWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPublicMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint256,string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEscrowWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMintFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchEscrowTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    startTokenId: BigNumberish,
    quantity: BigNumberish,
    executor: AddressLike
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    startTokenId: bigint,
    quantity: bigint,
    executor: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    startTokenId: bigint;
    quantity: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMintedEvent {
  export type InputTuple = [
    to: AddressLike,
    startTokenId: BigNumberish,
    quantity: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    startTokenId: bigint,
    quantity: bigint
  ];
  export interface OutputObject {
    to: string;
    startTokenId: bigint;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsecutiveTransferEvent {
  export type InputTuple = [
    fromTokenId: BigNumberish,
    toTokenId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [
    fromTokenId: bigint,
    toTokenId: bigint,
    from: string,
    to: string
  ];
  export interface OutputObject {
    fromTokenId: bigint;
    toTokenId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenIds: BigNumberish[],
    executor: AddressLike
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    tokenIds: bigint[],
    executor: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    tokenIds: bigint[];
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowWalletAddedEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowWalletRemovedEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintFeeChangedEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintStatusChangedEvent {
  export type InputTuple = [open: boolean];
  export type OutputTuple = [open: boolean];
  export interface OutputObject {
    open: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedEvent {
  export type InputTuple = [to: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [to: string, tokenId: bigint];
  export interface OutputObject {
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterAddedEvent {
  export type InputTuple = [minter: AddressLike];
  export type OutputTuple = [minter: string];
  export interface OutputObject {
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterRemovedEvent {
  export type InputTuple = [minter: AddressLike];
  export type OutputTuple = [minter: string];
  export interface OutputObject {
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicMintingStatusChangedEvent {
  export type InputTuple = [isPublic: boolean];
  export type OutputTuple = [isPublic: boolean];
  export interface OutputObject {
    isPublic: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SPGNFTCollection extends BaseContract {
  connect(runner?: ContractRunner | null): SPGNFTCollection;
  waitForDeployment(): Promise<this>;

  interface: SPGNFTCollectionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BATCH_TRANSFER_TYPEHASH: TypedContractMethod<[], [string], "view">;

  TBAImplementation: TypedContractMethod<[], [string], "view">;

  TBARegistry: TypedContractMethod<[], [string], "view">;

  TRANSFER_PERMIT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  addEscrowWallet: TypedContractMethod<
    [wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  addMinter: TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  availableSupply: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  canMint: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  contractURI: TypedContractMethod<[], [string], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  escrowTransfer: TypedContractMethod<
    [
      owner: AddressLike,
      to: AddressLike,
      tokenIds: BigNumberish[],
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  escrowTransferBatch: TypedContractMethod<
    [
      owner: AddressLike,
      to: AddressLike,
      startTokenId: BigNumberish,
      quantity: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  escrowTransferWithSignature: TypedContractMethod<
    [
      owner: AddressLike,
      to: AddressLike,
      tokenIds: BigNumberish[],
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getMintPrice: TypedContractMethod<[quantity: BigNumberish], [bigint], "view">;

  getNonce: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getTBA: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isEscrowWallet: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isPublicMinting: TypedContractMethod<[], [boolean], "view">;

  maxSupply: TypedContractMethod<[], [bigint], "view">;

  "mint(address,uint256,string[])": TypedContractMethod<
    [to: AddressLike, quantity: BigNumberish, tokenURIs: string[]],
    [bigint],
    "payable"
  >;

  "mint(address,uint256)": TypedContractMethod<
    [to: AddressLike, quantity: BigNumberish],
    [bigint],
    "payable"
  >;

  "mint(address)": TypedContractMethod<[to: AddressLike], [bigint], "payable">;

  mintFee: TypedContractMethod<[], [bigint], "view">;

  mintFeeRecipient: TypedContractMethod<[], [string], "view">;

  mintFeeToken: TypedContractMethod<[], [string], "view">;

  mintOpen: TypedContractMethod<[], [boolean], "view">;

  minters: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeEscrowWallet: TypedContractMethod<
    [wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  removeMinter: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[baseURI: string], [void], "nonpayable">;

  setContractURI: TypedContractMethod<
    [_contractURI: string],
    [void],
    "nonpayable"
  >;

  setMintFee: TypedContractMethod<
    [_mintFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMintOpen: TypedContractMethod<[_mintOpen: boolean], [void], "nonpayable">;

  setPublicMinting: TypedContractMethod<
    [_isPublic: boolean],
    [void],
    "nonpayable"
  >;

  setTokenURI: TypedContractMethod<
    [tokenId: BigNumberish, _tokenURI: string],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BATCH_TRANSFER_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TBAImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TBARegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRANSFER_PERMIT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addEscrowWallet"
  ): TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "availableSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "canMint"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "escrowTransfer"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      to: AddressLike,
      tokenIds: BigNumberish[],
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "escrowTransferBatch"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      to: AddressLike,
      startTokenId: BigNumberish,
      quantity: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "escrowTransferWithSignature"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      to: AddressLike,
      tokenIds: BigNumberish[],
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMintPrice"
  ): TypedContractMethod<[quantity: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTBA"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEscrowWallet"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPublicMinting"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint(address,uint256,string[])"
  ): TypedContractMethod<
    [to: AddressLike, quantity: BigNumberish, tokenURIs: string[]],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mint(address,uint256)"
  ): TypedContractMethod<
    [to: AddressLike, quantity: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mint(address)"
  ): TypedContractMethod<[to: AddressLike], [bigint], "payable">;
  getFunction(
    nameOrSignature: "mintFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintFeeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintFeeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "minters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeEscrowWallet"
  ): TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[baseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractURI"
  ): TypedContractMethod<[_contractURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMintFee"
  ): TypedContractMethod<[_mintFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMintOpen"
  ): TypedContractMethod<[_mintOpen: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPublicMinting"
  ): TypedContractMethod<[_isPublic: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenURI"
  ): TypedContractMethod<
    [tokenId: BigNumberish, _tokenURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchEscrowTransfer"
  ): TypedContractEvent<
    BatchEscrowTransferEvent.InputTuple,
    BatchEscrowTransferEvent.OutputTuple,
    BatchEscrowTransferEvent.OutputObject
  >;
  getEvent(
    key: "BatchMinted"
  ): TypedContractEvent<
    BatchMintedEvent.InputTuple,
    BatchMintedEvent.OutputTuple,
    BatchMintedEvent.OutputObject
  >;
  getEvent(
    key: "ConsecutiveTransfer"
  ): TypedContractEvent<
    ConsecutiveTransferEvent.InputTuple,
    ConsecutiveTransferEvent.OutputTuple,
    ConsecutiveTransferEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowTransfer"
  ): TypedContractEvent<
    EscrowTransferEvent.InputTuple,
    EscrowTransferEvent.OutputTuple,
    EscrowTransferEvent.OutputObject
  >;
  getEvent(
    key: "EscrowWalletAdded"
  ): TypedContractEvent<
    EscrowWalletAddedEvent.InputTuple,
    EscrowWalletAddedEvent.OutputTuple,
    EscrowWalletAddedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowWalletRemoved"
  ): TypedContractEvent<
    EscrowWalletRemovedEvent.InputTuple,
    EscrowWalletRemovedEvent.OutputTuple,
    EscrowWalletRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MintFeeChanged"
  ): TypedContractEvent<
    MintFeeChangedEvent.InputTuple,
    MintFeeChangedEvent.OutputTuple,
    MintFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "MintStatusChanged"
  ): TypedContractEvent<
    MintStatusChangedEvent.InputTuple,
    MintStatusChangedEvent.OutputTuple,
    MintStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "Minted"
  ): TypedContractEvent<
    MintedEvent.InputTuple,
    MintedEvent.OutputTuple,
    MintedEvent.OutputObject
  >;
  getEvent(
    key: "MinterAdded"
  ): TypedContractEvent<
    MinterAddedEvent.InputTuple,
    MinterAddedEvent.OutputTuple,
    MinterAddedEvent.OutputObject
  >;
  getEvent(
    key: "MinterRemoved"
  ): TypedContractEvent<
    MinterRemovedEvent.InputTuple,
    MinterRemovedEvent.OutputTuple,
    MinterRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PublicMintingStatusChanged"
  ): TypedContractEvent<
    PublicMintingStatusChangedEvent.InputTuple,
    PublicMintingStatusChangedEvent.OutputTuple,
    PublicMintingStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchEscrowTransfer(address,address,uint256,uint256,address)": TypedContractEvent<
      BatchEscrowTransferEvent.InputTuple,
      BatchEscrowTransferEvent.OutputTuple,
      BatchEscrowTransferEvent.OutputObject
    >;
    BatchEscrowTransfer: TypedContractEvent<
      BatchEscrowTransferEvent.InputTuple,
      BatchEscrowTransferEvent.OutputTuple,
      BatchEscrowTransferEvent.OutputObject
    >;

    "BatchMinted(address,uint256,uint256)": TypedContractEvent<
      BatchMintedEvent.InputTuple,
      BatchMintedEvent.OutputTuple,
      BatchMintedEvent.OutputObject
    >;
    BatchMinted: TypedContractEvent<
      BatchMintedEvent.InputTuple,
      BatchMintedEvent.OutputTuple,
      BatchMintedEvent.OutputObject
    >;

    "ConsecutiveTransfer(uint256,uint256,address,address)": TypedContractEvent<
      ConsecutiveTransferEvent.InputTuple,
      ConsecutiveTransferEvent.OutputTuple,
      ConsecutiveTransferEvent.OutputObject
    >;
    ConsecutiveTransfer: TypedContractEvent<
      ConsecutiveTransferEvent.InputTuple,
      ConsecutiveTransferEvent.OutputTuple,
      ConsecutiveTransferEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "EscrowTransfer(address,address,uint256[],address)": TypedContractEvent<
      EscrowTransferEvent.InputTuple,
      EscrowTransferEvent.OutputTuple,
      EscrowTransferEvent.OutputObject
    >;
    EscrowTransfer: TypedContractEvent<
      EscrowTransferEvent.InputTuple,
      EscrowTransferEvent.OutputTuple,
      EscrowTransferEvent.OutputObject
    >;

    "EscrowWalletAdded(address)": TypedContractEvent<
      EscrowWalletAddedEvent.InputTuple,
      EscrowWalletAddedEvent.OutputTuple,
      EscrowWalletAddedEvent.OutputObject
    >;
    EscrowWalletAdded: TypedContractEvent<
      EscrowWalletAddedEvent.InputTuple,
      EscrowWalletAddedEvent.OutputTuple,
      EscrowWalletAddedEvent.OutputObject
    >;

    "EscrowWalletRemoved(address)": TypedContractEvent<
      EscrowWalletRemovedEvent.InputTuple,
      EscrowWalletRemovedEvent.OutputTuple,
      EscrowWalletRemovedEvent.OutputObject
    >;
    EscrowWalletRemoved: TypedContractEvent<
      EscrowWalletRemovedEvent.InputTuple,
      EscrowWalletRemovedEvent.OutputTuple,
      EscrowWalletRemovedEvent.OutputObject
    >;

    "MintFeeChanged(uint256)": TypedContractEvent<
      MintFeeChangedEvent.InputTuple,
      MintFeeChangedEvent.OutputTuple,
      MintFeeChangedEvent.OutputObject
    >;
    MintFeeChanged: TypedContractEvent<
      MintFeeChangedEvent.InputTuple,
      MintFeeChangedEvent.OutputTuple,
      MintFeeChangedEvent.OutputObject
    >;

    "MintStatusChanged(bool)": TypedContractEvent<
      MintStatusChangedEvent.InputTuple,
      MintStatusChangedEvent.OutputTuple,
      MintStatusChangedEvent.OutputObject
    >;
    MintStatusChanged: TypedContractEvent<
      MintStatusChangedEvent.InputTuple,
      MintStatusChangedEvent.OutputTuple,
      MintStatusChangedEvent.OutputObject
    >;

    "Minted(address,uint256)": TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;
    Minted: TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;

    "MinterAdded(address)": TypedContractEvent<
      MinterAddedEvent.InputTuple,
      MinterAddedEvent.OutputTuple,
      MinterAddedEvent.OutputObject
    >;
    MinterAdded: TypedContractEvent<
      MinterAddedEvent.InputTuple,
      MinterAddedEvent.OutputTuple,
      MinterAddedEvent.OutputObject
    >;

    "MinterRemoved(address)": TypedContractEvent<
      MinterRemovedEvent.InputTuple,
      MinterRemovedEvent.OutputTuple,
      MinterRemovedEvent.OutputObject
    >;
    MinterRemoved: TypedContractEvent<
      MinterRemovedEvent.InputTuple,
      MinterRemovedEvent.OutputTuple,
      MinterRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PublicMintingStatusChanged(bool)": TypedContractEvent<
      PublicMintingStatusChangedEvent.InputTuple,
      PublicMintingStatusChangedEvent.OutputTuple,
      PublicMintingStatusChangedEvent.OutputObject
    >;
    PublicMintingStatusChanged: TypedContractEvent<
      PublicMintingStatusChangedEvent.InputTuple,
      PublicMintingStatusChangedEvent.OutputTuple,
      PublicMintingStatusChangedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
