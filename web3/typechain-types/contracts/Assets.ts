/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AssetsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAssetFunction"
      | "airdrop"
      | "assetIds"
      | "assetManagers"
      | "assets"
      | "createAsset"
      | "deleteAsset"
      | "executeAssetFunction"
      | "getAsset"
      | "getAssetAbi"
      | "getAssetApi"
      | "getAssetFunction"
      | "getAssetIds"
      | "initialize"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "setAssetManager"
      | "setAssetStatus"
      | "transferOwnership"
      | "updateAsset"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AirdropExecuted"
      | "AssetCreated"
      | "AssetDeleted"
      | "AssetFunctionAdded"
      | "AssetManagerAdded"
      | "AssetManagerRemoved"
      | "AssetStatusChanged"
      | "AssetTransactionExecuted"
      | "AssetUpdated"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAssetFunction",
    values: [BigNumberish, string, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "airdrop",
    values: [string, BytesLike, AddressLike[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetManagers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createAsset",
    values: [string, string, string, string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deleteAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "executeAssetFunction",
    values: [string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAssetAbi",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetApi",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetFunction",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetManager",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAsset",
    values: [string, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAssetFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "airdrop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAssetFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetAbi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetApi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAsset",
    data: BytesLike
  ): Result;
}

export namespace AirdropExecutedEvent {
  export type InputTuple = [
    id: string,
    selector: BytesLike,
    executedFunction: BytesLike,
    receivers: AddressLike[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    id: string,
    selector: string,
    executedFunction: string,
    receivers: string[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    id: string;
    selector: string;
    executedFunction: string;
    receivers: string[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetCreatedEvent {
  export type InputTuple = [
    id: string,
    name: string,
    symbol: string,
    metadata: string,
    assetType: BigNumberish,
    contractAddress: AddressLike,
    creator: AddressLike
  ];
  export type OutputTuple = [
    id: string,
    name: string,
    symbol: string,
    metadata: string,
    assetType: bigint,
    contractAddress: string,
    creator: string
  ];
  export interface OutputObject {
    id: string;
    name: string;
    symbol: string;
    metadata: string;
    assetType: bigint;
    contractAddress: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetDeletedEvent {
  export type InputTuple = [id: string, deletedBy: AddressLike];
  export type OutputTuple = [id: string, deletedBy: string];
  export interface OutputObject {
    id: string;
    deletedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetFunctionAddedEvent {
  export type InputTuple = [id: string, selector: BytesLike];
  export type OutputTuple = [id: string, selector: string];
  export interface OutputObject {
    id: string;
    selector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetManagerAddedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetManagerRemovedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetStatusChangedEvent {
  export type InputTuple = [id: string, isActive: boolean];
  export type OutputTuple = [id: string, isActive: boolean];
  export interface OutputObject {
    id: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetTransactionExecutedEvent {
  export type InputTuple = [
    assetId: string,
    assetName: string,
    assetType: BigNumberish,
    selector: BytesLike,
    executedFunction: BytesLike,
    data: BytesLike,
    success: boolean,
    result: BytesLike
  ];
  export type OutputTuple = [
    assetId: string,
    assetName: string,
    assetType: bigint,
    selector: string,
    executedFunction: string,
    data: string,
    success: boolean,
    result: string
  ];
  export interface OutputObject {
    assetId: string;
    assetName: string;
    assetType: bigint;
    selector: string;
    executedFunction: string;
    data: string;
    success: boolean;
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetUpdatedEvent {
  export type InputTuple = [id: string, updatedBy: AddressLike];
  export type OutputTuple = [id: string, updatedBy: string];
  export interface OutputObject {
    id: string;
    updatedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Assets extends BaseContract {
  connect(runner?: ContractRunner | null): Assets;
  waitForDeployment(): Promise<this>;

  interface: AssetsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAssetFunction: TypedContractMethod<
    [
      assetType: BigNumberish,
      id: string,
      selector: BytesLike,
      functionAbi: BytesLike,
      api: string
    ],
    [void],
    "nonpayable"
  >;

  airdrop: TypedContractMethod<
    [
      id: string,
      airdropSelector: BytesLike,
      receivers: AddressLike[],
      amounts: BigNumberish[],
      gasLimitPerTransfer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  assetIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  assetManagers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  assets: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, bigint, string, boolean, string] & {
        id: string;
        name: string;
        symbol: string;
        metadata: string;
        assetType: bigint;
        contractAddress: string;
        isActive: boolean;
        creator: string;
      }
    ],
    "view"
  >;

  createAsset: TypedContractMethod<
    [
      id: string,
      name: string,
      symbol: string,
      metadata: string,
      assetType: BigNumberish,
      contractAddress: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  deleteAsset: TypedContractMethod<[id: string], [void], "nonpayable">;

  executeAssetFunction: TypedContractMethod<
    [
      assetId: string,
      selector: BytesLike,
      data: BytesLike,
      gasLimit: BigNumberish
    ],
    [[boolean, string]],
    "nonpayable"
  >;

  getAsset: TypedContractMethod<
    [id: string],
    [
      [string, string, string, bigint, string, boolean, string, string[]] & {
        name: string;
        symbol: string;
        metadata: string;
        assetType: bigint;
        contractAddress: string;
        isActive: boolean;
        creator: string;
        selectors: string[];
      }
    ],
    "view"
  >;

  getAssetAbi: TypedContractMethod<
    [id: string, selector: BytesLike],
    [string],
    "view"
  >;

  getAssetApi: TypedContractMethod<
    [id: string, selector: BytesLike],
    [string],
    "view"
  >;

  getAssetFunction: TypedContractMethod<
    [id: string, selector: BytesLike],
    [string],
    "view"
  >;

  getAssetIds: TypedContractMethod<[], [string[]], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAssetManager: TypedContractMethod<
    [manager: AddressLike, isActive: boolean],
    [void],
    "nonpayable"
  >;

  setAssetStatus: TypedContractMethod<
    [id: string, isActive: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAsset: TypedContractMethod<
    [id: string, name: string, symbol: string, metadata: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAssetFunction"
  ): TypedContractMethod<
    [
      assetType: BigNumberish,
      id: string,
      selector: BytesLike,
      functionAbi: BytesLike,
      api: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "airdrop"
  ): TypedContractMethod<
    [
      id: string,
      airdropSelector: BytesLike,
      receivers: AddressLike[],
      amounts: BigNumberish[],
      gasLimitPerTransfer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assetIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "assetManagers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "assets"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, bigint, string, boolean, string] & {
        id: string;
        name: string;
        symbol: string;
        metadata: string;
        assetType: bigint;
        contractAddress: string;
        isActive: boolean;
        creator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAsset"
  ): TypedContractMethod<
    [
      id: string,
      name: string,
      symbol: string,
      metadata: string,
      assetType: BigNumberish,
      contractAddress: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteAsset"
  ): TypedContractMethod<[id: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeAssetFunction"
  ): TypedContractMethod<
    [
      assetId: string,
      selector: BytesLike,
      data: BytesLike,
      gasLimit: BigNumberish
    ],
    [[boolean, string]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAsset"
  ): TypedContractMethod<
    [id: string],
    [
      [string, string, string, bigint, string, boolean, string, string[]] & {
        name: string;
        symbol: string;
        metadata: string;
        assetType: bigint;
        contractAddress: string;
        isActive: boolean;
        creator: string;
        selectors: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAssetAbi"
  ): TypedContractMethod<[id: string, selector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAssetApi"
  ): TypedContractMethod<[id: string, selector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAssetFunction"
  ): TypedContractMethod<[id: string, selector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAssetIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAssetManager"
  ): TypedContractMethod<
    [manager: AddressLike, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetStatus"
  ): TypedContractMethod<[id: string, isActive: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAsset"
  ): TypedContractMethod<
    [id: string, name: string, symbol: string, metadata: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AirdropExecuted"
  ): TypedContractEvent<
    AirdropExecutedEvent.InputTuple,
    AirdropExecutedEvent.OutputTuple,
    AirdropExecutedEvent.OutputObject
  >;
  getEvent(
    key: "AssetCreated"
  ): TypedContractEvent<
    AssetCreatedEvent.InputTuple,
    AssetCreatedEvent.OutputTuple,
    AssetCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AssetDeleted"
  ): TypedContractEvent<
    AssetDeletedEvent.InputTuple,
    AssetDeletedEvent.OutputTuple,
    AssetDeletedEvent.OutputObject
  >;
  getEvent(
    key: "AssetFunctionAdded"
  ): TypedContractEvent<
    AssetFunctionAddedEvent.InputTuple,
    AssetFunctionAddedEvent.OutputTuple,
    AssetFunctionAddedEvent.OutputObject
  >;
  getEvent(
    key: "AssetManagerAdded"
  ): TypedContractEvent<
    AssetManagerAddedEvent.InputTuple,
    AssetManagerAddedEvent.OutputTuple,
    AssetManagerAddedEvent.OutputObject
  >;
  getEvent(
    key: "AssetManagerRemoved"
  ): TypedContractEvent<
    AssetManagerRemovedEvent.InputTuple,
    AssetManagerRemovedEvent.OutputTuple,
    AssetManagerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AssetStatusChanged"
  ): TypedContractEvent<
    AssetStatusChangedEvent.InputTuple,
    AssetStatusChangedEvent.OutputTuple,
    AssetStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "AssetTransactionExecuted"
  ): TypedContractEvent<
    AssetTransactionExecutedEvent.InputTuple,
    AssetTransactionExecutedEvent.OutputTuple,
    AssetTransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "AssetUpdated"
  ): TypedContractEvent<
    AssetUpdatedEvent.InputTuple,
    AssetUpdatedEvent.OutputTuple,
    AssetUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AirdropExecuted(string,bytes4,bytes,address[],uint256[])": TypedContractEvent<
      AirdropExecutedEvent.InputTuple,
      AirdropExecutedEvent.OutputTuple,
      AirdropExecutedEvent.OutputObject
    >;
    AirdropExecuted: TypedContractEvent<
      AirdropExecutedEvent.InputTuple,
      AirdropExecutedEvent.OutputTuple,
      AirdropExecutedEvent.OutputObject
    >;

    "AssetCreated(string,string,string,string,uint8,address,address)": TypedContractEvent<
      AssetCreatedEvent.InputTuple,
      AssetCreatedEvent.OutputTuple,
      AssetCreatedEvent.OutputObject
    >;
    AssetCreated: TypedContractEvent<
      AssetCreatedEvent.InputTuple,
      AssetCreatedEvent.OutputTuple,
      AssetCreatedEvent.OutputObject
    >;

    "AssetDeleted(string,address)": TypedContractEvent<
      AssetDeletedEvent.InputTuple,
      AssetDeletedEvent.OutputTuple,
      AssetDeletedEvent.OutputObject
    >;
    AssetDeleted: TypedContractEvent<
      AssetDeletedEvent.InputTuple,
      AssetDeletedEvent.OutputTuple,
      AssetDeletedEvent.OutputObject
    >;

    "AssetFunctionAdded(string,bytes4)": TypedContractEvent<
      AssetFunctionAddedEvent.InputTuple,
      AssetFunctionAddedEvent.OutputTuple,
      AssetFunctionAddedEvent.OutputObject
    >;
    AssetFunctionAdded: TypedContractEvent<
      AssetFunctionAddedEvent.InputTuple,
      AssetFunctionAddedEvent.OutputTuple,
      AssetFunctionAddedEvent.OutputObject
    >;

    "AssetManagerAdded(address)": TypedContractEvent<
      AssetManagerAddedEvent.InputTuple,
      AssetManagerAddedEvent.OutputTuple,
      AssetManagerAddedEvent.OutputObject
    >;
    AssetManagerAdded: TypedContractEvent<
      AssetManagerAddedEvent.InputTuple,
      AssetManagerAddedEvent.OutputTuple,
      AssetManagerAddedEvent.OutputObject
    >;

    "AssetManagerRemoved(address)": TypedContractEvent<
      AssetManagerRemovedEvent.InputTuple,
      AssetManagerRemovedEvent.OutputTuple,
      AssetManagerRemovedEvent.OutputObject
    >;
    AssetManagerRemoved: TypedContractEvent<
      AssetManagerRemovedEvent.InputTuple,
      AssetManagerRemovedEvent.OutputTuple,
      AssetManagerRemovedEvent.OutputObject
    >;

    "AssetStatusChanged(string,bool)": TypedContractEvent<
      AssetStatusChangedEvent.InputTuple,
      AssetStatusChangedEvent.OutputTuple,
      AssetStatusChangedEvent.OutputObject
    >;
    AssetStatusChanged: TypedContractEvent<
      AssetStatusChangedEvent.InputTuple,
      AssetStatusChangedEvent.OutputTuple,
      AssetStatusChangedEvent.OutputObject
    >;

    "AssetTransactionExecuted(string,string,uint8,bytes4,bytes,bytes,bool,bytes)": TypedContractEvent<
      AssetTransactionExecutedEvent.InputTuple,
      AssetTransactionExecutedEvent.OutputTuple,
      AssetTransactionExecutedEvent.OutputObject
    >;
    AssetTransactionExecuted: TypedContractEvent<
      AssetTransactionExecutedEvent.InputTuple,
      AssetTransactionExecutedEvent.OutputTuple,
      AssetTransactionExecutedEvent.OutputObject
    >;

    "AssetUpdated(string,address)": TypedContractEvent<
      AssetUpdatedEvent.InputTuple,
      AssetUpdatedEvent.OutputTuple,
      AssetUpdatedEvent.OutputObject
    >;
    AssetUpdated: TypedContractEvent<
      AssetUpdatedEvent.InputTuple,
      AssetUpdatedEvent.OutputTuple,
      AssetUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
