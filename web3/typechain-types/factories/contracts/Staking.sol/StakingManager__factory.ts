/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
 
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  StakingManager,
  StakingManagerInterface,
} from "../../../contracts/Staking.sol/StakingManager";

const _abi = [
  {
    inputs: [],
    name: "EnforcedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpectedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "RewardClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "RewardDistributed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakedAt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "unstakeScheduledAt",
        type: "uint256",
      },
    ],
    name: "TokenStaked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "unstakedAt",
        type: "uint256",
      },
    ],
    name: "TokenUnstaked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "assets",
    outputs: [
      {
        internalType: "contract Assets",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "distributeReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "unstakeScheduledAt",
        type: "uint256",
      },
    ],
    name: "stakeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakes",
    outputs: [
      {
        internalType: "address",
        name: "collectionAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unstakeScheduledAt",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isStaked",
        type: "bool",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
      {
        internalType: "bool",
        name: "forceUnstake",
        type: "bool",
      },
    ],
    name: "unstakeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userStakedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234601957604051611c7c61001f8239611c7c90f35b600080fdfe60a0604052600436101561001257600080fd5b60003560e01c80630ed9d33a146100c257806318a4a248146100bd5780632a74ec01146100b8578063584b62a1146100b35780635c975abb146100ae5780637043a9f5146100a9578063715018a6146100a457806371a973051461009f5780638da5cb5b1461009a578063c4d66de8146100955763f2fde38b036100c7576105c0565b6105a8565b61055f565b610538565b6104e4565b6104c8565b610453565b610413565b6102d6565b610280565b6101d9565b600080fd5b6001600160a01b031690565b90565b6001600160a01b0381165b036100c757565b905035906100fa826100db565b565b806100e6565b905035906100fa826100fc565b90916060828403126100c7576100d861012884846100ed565b93604061013882602087016100ed565b9401610102565b6100d8906100cc906001600160a01b031682565b6100d89061013f565b6100d890610153565b9061016f9061015c565b600052602052604060002090565b6100d86100d86100d89290565b9061016f9061017d565b6100d8916008021c5b60ff1690565b906100d89154610194565b6100d8926101cb6000936101c66101d0946002610165565b610165565b61018a565b6101a3565b9052565b346100c7576102076101f56101ef36600461010f565b916101ae565b60405191829182901515815260200190565b0390f35b909182601f830112156100c75781359167ffffffffffffffff83116100c75760200192602083028401116100c757565b906060828203126100c75761025081836100ed565b92602083013567ffffffffffffffff81116100c757826102776040946100d893870161020b565b94909501610102565b346100c75761029c61029336600461023b565b9291909161114d565b604051005b6080818303126100c7576102b582826100ed565b926100d86102c68460208501610102565b93606061013882604087016100ed565b346100c75761029c6102e93660046102a1565b92919091611309565b91906040838203126100c7576100d890602061013882866100ed565b6100d8906100cc565b6100d8905461030e565b6100d89081565b6100d89054610321565b6100d89061019d565b6100d89054610332565b6100d89060081c6100cc565b6100d89054610345565b906101cb61036a926001610165565b9061037482610317565b9161038160018201610328565b9161038e60028301610328565b9161039b60038201610328565b916100d860046103ac81850161033b565b9301610351565b91946103fb610404929897956103f460a0966103ed6100fa9a6103e660c08a019e60008b01906001600160a01b03169052565b6020890152565b6040870152565b6060850152565b15156080830152565b01906001600160a01b03169052565b346100c75761020761042f6104293660046102f2565b9061035b565b9261043f96949692919260405190565b968796876103b3565b60009103126100c757565b346100c757610463366004610448565b6102076101f5611315565b8015156100e6565b905035906100fa8261046e565b906060828203126100c75761049881836100ed565b92602083013567ffffffffffffffff81116100c757826104bf6040946100d893870161020b565b94909501610476565b346100c75761029c6104db366004610483565b92919091611760565b346100c7576104f4366004610448565b61029c6117a4565b6100d8916008021c6100cc565b906100d891546104fc565b6100d8600080610509565b6101d59061015c565b6020810192916100fa919061051f565b346100c757610548366004610448565b610207610553610514565b60405191829182610528565b346100c75761056f366004610448565b61020761057a6117ac565b604051918291826001600160a01b03909116815260200190565b906020828203126100c7576100d8916100ed565b346100c75761029c6105bb366004610594565b6119d6565b346100c75761029c6105d3366004610594565b611a37565b906100fa9392916105e7611a40565b906105fb9392916105f6611a6a565b610d42565b6100fa611ac8565b0190565b1561060e57565b60405162461bcd60e51b81526020600482015260096024820152684e4f5f544f4b454e5360b81b6044820152606490fd5b1561064657565b60405162461bcd60e51b8152602060048201526014602482015273494e56414c49445f554e5354414b455f54494d4560601b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176106ba57604052565b610682565b9037565b8183529091602001916001600160fb1b0381116100c7578291602061060392029384916106bf565b93929061070a6020916100fa94604088019188830360008a01526106c3565b940152565b6040513d6000823e3d90fd5b634e487b7160e01b600052603260045260246000fd5b9190811015610741576020020190565b61071b565b356100d8816100fc565b905051906100fa826100db565b906020828203126100c7576100d891610750565b905051906100fa8261046e565b906020828203126100c7576100d891610771565b6001600160a01b0390911681526040810192916100fa91602090610404565b156107b857565b60405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606490fd5b156107f557565b60405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d4d51052d15160921b6044820152606490fd5b906100fa61083860405190565b9283610698565b67ffffffffffffffff81116106ba5760208091020190565b906108696108648361083f565b61082b565b918252565b6100d8606061082b565b61088061086e565b600080825260208201819052604082015290565b6100d8610878565b60005b8281106108ab57505050565b6020906108b6610894565b818401520161089f565b906100fa6108d66108d084610857565b9361083f565b601f19016020840161089c565b60005b8281106108f257505050565b6020906108fd610894565b81840152016108e6565b906100fa6109176108d084610857565b601f1901602084016108e3565b6100d861010061082b565b634e487b7160e01b600052600060045260246000fd5b906001600160a01b03905b9181191691161790565b9061096a6100d86109719261015c565b8254610945565b9055565b9060001990610950565b9061098f6100d86109719261017d565b8254610975565b9060ff90610950565b906109af6100d861097192151590565b8254610996565b90610100600160a81b039060081b610950565b906109d96100d86109719261015c565b82546109b6565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610a0957565b6109e0565b6100d89060036109f6565b9160001960089290920291821b911b610950565b9190610a3e6100d86109719361017d565b908354610a19565b6100fa91600091610a2d565b60008082556100fa91600290610a6b8360018301610a46565b01610a46565b90600003610a82576100fa90610a52565b61092f565b818110610a92575050565b80610aa06000600393610a71565b01610a87565b919091828210610ab557505050565b610ad9610acd610ac76100fa95610a0e565b93610a0e565b91600052602060002090565b9182019101610a87565b90600160401b81116106ba5781610afb6100fa935490565b90828155610aa6565b6002610b4860406100fa94610b2c610b2660008301516001600160a01b031690565b8661095a565b610b43610b3a602083015190565b6001870161097f565b015190565b910161097f565b906100fa91610b04565b610b78610acd610b67845190565b93610b728585610ae3565b60200190565b6000915b838310610b895750505050565b6003602082610ba1610b9b6001955190565b86610b4f565b01920192019190610b7c565b906100fa91610b59565b818110610bc2575050565b80610bd06000600393610a71565b01610bb7565b919091828210610be557505050565b610bf7610acd610ac76100fa95610a0e565b9182019101610bb7565b90600160401b81116106ba5781610c196100fa935490565b90828155610bd6565b610c3b610acd610c30845190565b93610b728585610c01565b6000915b838310610c4c5750505050565b6003602082610c5e610b9b6001955190565b01920192019190610c3f565b906100fa91610c22565b6006610d1a60e06100fa94610c96610b2660008301516001600160a01b031690565b610ca4610b3a602083015190565b610cbb610cb2604083015190565b6002870161097f565b610cd2610cc9606083015190565b6003870161097f565b610d0360048601610cef610ce96080850151151590565b8261099f565b60a08301516001600160a01b0316906109c9565b610b43610d1160c083015190565b60058701610bad565b9101610c6a565b906100fa91610c74565b9081526040810192916100fa9160200152565b0152565b919391600085610d5c610d548361017d565b885b11610607565b610d6742871161063f565b610d78610d738461015c565b61015c565b93843b156100c75760405195634d761d2560e01b8752838780610da08b8787600485016106eb565b0381838a5af196871561102757610df497611121575b506020610dd4610dcf610dc88761017d565b8686610731565b610746565b6040519889918291906331a9108f60e11b5b835260048301526024820190565b0381895afa968715611027578497611100575b50610e118461017d565b898110156110f457610e27610dcf828686610731565b6001600160a01b03891633148015611083575b801561102c575b8015610fc8575b8015610fa2575b610e58906107b1565b600181610e658983610165565b90610e6f9161018a565b600401610e7b9061033b565b15610e85906107ee565b610e8e8761017d565b610e97816108c0565b90610ea190610907565b610ea9610924565b6001600160a01b038b168a82015291610ec3856020850152565b610ece426040850152565b610ed98e6060850152565b83151560808401526001600160a01b038d1660a084015260c083015260e082015282610f058a84610165565b90610f0f9161018a565b90610f1991610d21565b8188610f268c6002610165565b90610f3091610165565b90610f3a9161018a565b90610f449161099f565b610f4d8761015c565b90610f579061017d565b610f608a61015c565b91610f6a60405190565b80610f768e4283610d2b565b037fc1abeafddddbaf4967386eb7c626c3a6ba1769ece1752ddd8969263fda19c80d91a4600101610e11565b50610e58610fae6117ac565b610fc0335b916001600160a01b031690565b149050610e4f565b5060405163afc0381d60e01b81523360048201526020816024818c5afa908115611027578791610ff9575b50610e48565b61101a915060203d8111611020575b6110128183610698565b81019061077e565b38610ff3565b503d611008565b61070f565b5060405163e985e9c560e01b81526020818061104c338e60048401610792565b03818c5afa908115611027578791611065575b50610e41565b61107d915060203d8111611020576110128183610698565b3861105f565b5060405163020604bf60e21b8152600481018290526020816024818c5afa8015611027576110bf9188916110c6575b506001600160a01b031690565b3314610e3a565b6110e7915060203d81116110ed575b6110df8183610698565b81019061075d565b386110b2565b503d6110d5565b50975050505050505050565b61111a91975060203d6020116110ed576110df8183610698565b9538610e07565b61114090853d8711611146575b6111388183610698565b810190610448565b38610db6565b503d61112e565b906100fa9392916105d8565b906100fa939291611168611af6565b906100fa939291611177611a40565b906105fb939291611186611a6a565b611246565b1561119257565b60405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b6044820152606490fd5b8054821015610741576111de600391600052602060002090565b91020190600090565b9190610a82576100fa91610b04565b90815491600160401b8310156106ba57826112199160016100fa950181556111c4565b906111e7565b6001600160a01b0390911681526060810193926100fa929091604091610d3e906020830152565b917f6687bdf4af88532ff981b1e42838397132771c3870233c7d43bf7cbadf813eac906112ec6112e66112e06112da6112876100d8886101cb8b6001610165565b6112d56112a5600560048401936106036112a08661033b565b61118b565b6112ad61086e565b6001600160a01b0389168152906112c58d6020840152565b6112d0426040840152565b6111f6565b610351565b9661015c565b9461017d565b9461015c565b946113046112f960405190565b92839242918461121f565b0390a4565b906100fa939291611159565b6100d87fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330061033b565b906100fa93929161134d611a40565b906105fb93929161135c611a6a565b61145d565b369037565b906100fa6113766108d084610857565b601f190160208401611361565b1561138a57565b60405162461bcd60e51b8152602060048201526015602482015274155394d51052d157d393d517d4d0d2115115531151605a1b6044820152606490fd5b906113d0825190565b811015610741576020809102010190565b906114016113fa6113f0845190565b8084529260200190565b9260200190565b9060005b8181106114125750505090565b90919261142f6114286001928651815260200190565b9460200190565b929101611405565b929160206114546100fa93604087019087820360008901526113e1565b94019015159052565b6114bc91939261146a8190565b9461147e611478600061017d565b87610d56565b61148a610d738461015c565b60805260206114a6610dcf61149f600061017d565b8585610731565b6040519586918291906331a9108f60e11b610de6565b03816080515afa9384156110275760009461173f575b506114dc86611366565b966114e7600061017d565b875b8110156116e0576114fe610dcf828686610731565b906115116100d8836101cb896001610165565b916115216112a06004850161033b565b86888c8b6115346100cc60048901610351565b33148015611635575b946101cb81956101c661159f96611593600060046114e99e61158d6115f29f9e8f61158a90869e61158161159a9f8f958015611618575b61157d906107b1565b1590565b6115f9576113c7565b52565b0161099f565b6002610165565b61099f565b6115b16115ab8961015c565b9161017d565b6115ba8a61015c565b917fb97b943e423d8306719662c954384fc5c30b1251db3ce17f9de60d60e4a2e2bc6115e560405190565b428152602090a460010190565b90506114e7565b61161361160b6100d860038901610328565b421015611383565b6113c7565b5061157d6116246117ac565b61162d33610fb3565b149050611574565b50505050509061164460405190565b63afc0381d60e01b815233600482015291602083806024810103816080515afa801561102757600061159a838f8c8f8f6115938760046114e99e61158d6115f29f8f61158a9061159f9f9b6115816101c69b8f959e6101cb9f8b916116c2575b509f509f50509e50505050509e50505050965050959697505061153d565b6116da915060203d8111611020576110128183610698565b386116a4565b5096949550505050506080513b156100c75761171a9160009161170260405190565b938492839263bdf9ad3b60e01b845260048401611437565b0381836080515af180156110275761172f5750565b6100fa9060006111388183610698565b61175991945060203d6020116110ed576110df8183610698565b92386114d2565b906100fa93929161133e565b611774611af6565b6100fa611792565b6100cc6100d86100d89290565b6100d89061177c565b6100fa61179f6000611789565b611b33565b6100fa61176c565b6100d87f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300610317565b6100d89060401c61019d565b6100d890546117d5565b6100d8905b67ffffffffffffffff1690565b6100d890546117eb565b6117f06100d86100d89290565b9067ffffffffffffffff90610950565b6117f06100d86100d89267ffffffffffffffff1690565b9061184b6100d861097192611824565b8254611814565b9068ff00000000000000009060401b610950565b906118766100d861097192151590565b8254611852565b6101d590611807565b6020810192916100fa919061187d565b61189e611ba4565b90816118b56118af61157d836117e1565b916117fd565b906000926118c284611807565b67ffffffffffffffff841614806119c2575b6001936118f16118e386611807565b9167ffffffffffffffff1690565b14908161199a575b155b9081611991575b506119825761192b90826119228661191987611807565b9801978861183b565b611973576119c9565b61193457505050565b61196261196e927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d294611866565b60405191829182611886565b0390a1565b61197d8487611866565b6119c9565b63f92ee8a960e01b8452600484fd5b15905038611902565b90506118fb6119a83061015c565b3b6119b96119b58861017d565b9190565b149190506118f9565b50816118d4565b6100fa9061179f81611bc1565b6100fa90611896565b6100fa906119eb611af6565b60006119f681611789565b6001600160a01b0381166001600160a01b03841614611a1a5750506100fa90611b33565b631e4fbdf760e01b82526001600160a01b03166004820152602490fd5b6100fa906119df565b611a48611315565b611a4e57565b63d93c066560e01b6000908152600490fd5b6100d8600261017d565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00611a9481610328565b611a9c611a60565b908114611aac576100fa9161097f565b633ee5aeb560e01b6000908152600490fd5b6100d8600161017d565b6100fa7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006000610b48611abe565b611afe6117ac565b3390611b0982610fb3565b03611b115750565b63118cdaa760e01b60009081526001600160a01b039091166004526024036000fd5b611b73611b6d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300610d7384611b6783610317565b9261095a565b9161015c565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0611b9e60405190565b600090a3565b6100d8611bf3565b6100fa90611bb8611bfb565b6100fa90611c2a565b6100fa90611bac565b6100d87ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061017d565b6100d8611bca565b611c0661157d611c33565b611c0c57565b631afcd79f60e31b6000908152600490fd5b6100fa906119eb611bfb565b6100fa90611c1e565b6100d86000611c40611ba4565b016117e156fea26469706673582212200046012c5993aafb6460a19d9b880b1017500cd23b18cd096fb1aadcd3cff0b764736f6c634300081c0033";

type StakingManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingManager__factory extends ContractFactory {
  constructor(...args: StakingManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      StakingManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): StakingManager__factory {
    return super.connect(runner) as StakingManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingManagerInterface {
    return new Interface(_abi) as StakingManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): StakingManager {
    return new Contract(address, _abi, runner) as unknown as StakingManager;
  }
}
