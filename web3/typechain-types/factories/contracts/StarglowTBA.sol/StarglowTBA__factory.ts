/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  StarglowTBA,
  StarglowTBAInterface,
} from "../../../contracts/StarglowTBA.sol/StarglowTBA";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address",
      },
    ],
    name: "Executed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "PermittedSignerAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "PermittedSignerRemoved",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "EXECUTE_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "addPermittedSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "executeWithSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_salt",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nftContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "permittedSigners",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "digest",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "recoverSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "removePermittedSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "salt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052346019576040516115e461001f82396115e490f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461011b57806317d70f7c146101165780633644e515146101115780635d7e3fbf1461010c57806360d2f33d146101075780638da5cb5b1461010257806397aba7f9146100fd578063a3f4df7e146100f8578063b61d27f6146100f3578063bb64a7bb146100ee578063bfa0b133146100e9578063c53822de146100e4578063c8c70760146100df578063d56d229d146100da578063ea30f6d9146100d55763ffa1ad740361000e576107ae565b610763565b6106f8565b6106bc565b61069c565b6105ff565b6105d8565b610551565b6104b4565b6103e5565b61029f565b610266565b610249565b6101f2565b6101bc565b61015e565b6001600160e01b031981165b0361013357565b600080fd5b9050359061014582610120565b565b906020828203126101335761015b91610138565b90565b346101335761018b610179610174366004610147565b6107e9565b60405191829182901515815260200190565b0390f35b600091031261013357565b61015b916008021c81565b9061015b915461019a565b61015b600060026101a5565b34610133576101cc36600461018f565b61018b6101d76101b0565b6040519182918290815260200190565b61015b6000806101a5565b346101335761020236600461018f565b61018b6101d76101e7565b6001600160a01b031690565b6001600160a01b03811661012c565b9050359061014582610219565b906020828203126101335761015b91610228565b346101335761026161025c366004610235565b6108e8565b604051005b346101335761027636600461018f565b61018b7f4f872536e1c5ce57c6ece6e282476cbe4b41d190b60136f6485314c5008900d86101d7565b34610133576102af36600461018f565b61018b6102ba610a87565b604051918291826001600160a01b03909116815260200190565b8061012c565b90503590610145826102d4565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761031f57604052565b6102e7565b9061014561033160405190565b92836102fd565b67ffffffffffffffff811161031f57602090601f01601f19160190565b0190565b90826000939282370152565b9092919261037a61037582610338565b610324565b938185528183011161013357610145916020850190610359565b9080601f830112156101335781602061015b93359101610365565b919091604081840312610133576103c683826102da565b92602082013567ffffffffffffffff81116101335761015b9201610394565b346101335761018b6102ba6103fb3660046103af565b90610c54565b9061040e61037583610338565b918252565b61041d600b610401565b6a53746172676c6f7754424160a81b602082015290565b61015b610413565b61015b610434565b61015b61043c565b60005b83811061045f5750506000910152565b818101518382015260200161044f565b61049061049960209361035593610484815190565b80835293849260200190565b9586910161044c565b601f01601f191690565b602080825261015b9291019061046f565b34610133576104c436600461018f565b61018b6104cf610444565b604051918291826104a3565b909182601f830112156101335781359167ffffffffffffffff831161013357602001926001830284011161013357565b91606083830312610133576105208284610228565b9261052e83602083016102da565b92604082013567ffffffffffffffff81116101335761054d92016104db565b9091565b61018b6104cf61056236600461050b565b92919091610dbe565b61015b9061020d906001600160a01b031682565b61015b9061056b565b61015b9061057f565b9061059b90610588565b600052602052604060002090565b61015b916008021c5b60ff1690565b9061015b91546105a9565b60006105d361015b926005610591565b6105b8565b346101335761018b6101796105ee366004610235565b6105c3565b61015b600060036101a5565b346101335761060f36600461018f565b61018b6101d76105f3565b909160c082840312610133576106308383610228565b9261063e81602085016102da565b92604081013567ffffffffffffffff8111610133578261065f9183016104db565b92909361066f8260608501610228565b9261067d83608083016102da565b9260a082013567ffffffffffffffff81116101335761054d92016104db565b61018b6104cf6106ad36600461061a565b96959095949194939293611005565b34610133576102616106cf366004610235565b6111d5565b61015b916008021c61020d565b9061015b91546106d4565b61015b600060016106e1565b346101335761070836600461018f565b61018b6102ba6106ec565b90608082820312610133576107288183610228565b9261073682602085016102da565b9261074483604083016102da565b92606082013567ffffffffffffffff81116101335761054d92016104db565b3461013357610261610776366004610713565b93929092611385565b6107896001610401565b603160f81b602082015290565b61015b61077f565b61015b610796565b61015b61079e565b34610133576107be36600461018f565b61018b6104cf6107a6565b6107dc6107d661015b9290565b60e01b90565b6001600160e01b03191690565b600162203e0b60e21b03196001600160e01b031982161490811561080b575090565b905061082b61081d6301ffc9a76107c9565b916001600160e01b03191690565b1490565b61020d61015b61015b9290565b61015b9061082f565b1561084c57565b60405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b6044820152606490fd5b1561088957565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba1027232a1037bbb732b960991b6044820152606490fd5b9060ff905b9181191691161790565b906108dd61015b6108e492151590565b82546108be565b9055565b61093c9061090d6108fc61020d600061083c565b6001600160a01b0383161415610845565b61092261091b61020d610a87565b3314610882565b6109376001610932836005610591565b6108cd565b610588565b7f425d2e6ca7b4c27e06a0b6c781a7a0d8a5661dba370a420150c9010a01b34fb361096660405190565b600090a2565b61015b9061020d565b61015b905461096c565b1561098657565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b9a5d1a585b1a5e9959608a1b6044820152606490fd5b61015b9081565b61015b90546109bd565b3d156109e8576109dd3d610401565b903d6000602084013e565b606090565b156109f457565b60405162461bcd60e51b815260206004820152600e60248201526d1bdddb995c93d98819985a5b195960921b6044820152606490fd5b9050519061014582610219565b906020828203126101335761015b91610a2a565b15610a5257565b60405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21037bbb732b960991b6044820152606490fd5b610a916001610975565b610ac1610a9e600061083c565b91610aba6001600160a01b0384165b916001600160a01b031690565b141561097f565b61015b610b55610b48610937600080610b0a610add6001610975565b610b19610aea60026109c4565b6040516331a9108f60e11b60208201529384916024830190815260200190565b602082018103825203836102fd565b602082519201905afa610b33610b2d6109ce565b916109ed565b6020610b3d825190565b818301019101610a37565b926001600160a01b031690565b6001600160a01b0383161415610a4b565b61015b61015b61015b9290565b15610b7a57565b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606490fd5b61015b90610b66565b15610bcf57565b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964207369676e6174757265202773272076616c756500000000006044820152606490fd5b610c4461014594610c3d606094989795610c33608086019a6000870152565b60ff166020850152565b6040830152565b0152565b6040513d6000823e3d90fd5b60209160009182610c7d610c66845190565b610c77610c736041610b66565b9190565b14610b73565b50610cde848301519260606040820151910151851a93610cd2610c9f83610bbf565b610ccb610c737f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0610b66565b1115610bc8565b60405194859485610c14565b838052039060015afa15610cf25760005190565b610c48565b15610cfe57565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081d185c99d95d60921b6044820152606490fd5b90916103559083908093610359565b909161015b92610d34565b15610d5557565b60405162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b6044820152606490fd5b919061049981610d9f816103559560209181520190565b8095610359565b90815260406020820181905261015b93910191610d88565b92917f12b246851a13a3216a99e5d8fb3b321e6ec2d3cea1eff08a997dd93151fc0ff990610e03610df261020d600061083c565b6001600160a01b0387161415610cf7565b610e1161091b61020d610a87565b610e44600080610e2060405190565b80610e2c898783610d43565b0390878a5af195610937610e3e6109ce565b97610d4e565b92610e64610e5133610588565b95610e5b60405190565b93849384610da6565b0390a390565b15610e7157565b60405162461bcd60e51b815260206004820152601160248201527014da59db985d1d5c9948195e1c1a5c9959607a1b6044820152606490fd5b61015b906105b2565b61015b9054610eaa565b15610ec457565b60405162461bcd60e51b81526020600482015260146024820152732737ba103832b936b4ba3a32b21039b4b3b732b960611b6044820152606490fd5b61015b913691610365565b9194610f51610c4492989795610f4a60a096610f436101459a610f3360c08a019e60008b0152565b6001600160a01b03166020890152565b6040870152565b6060850152565b6001600160a01b03166080830152565b6020809392610f7e61040e6103559461190160f01b815260020190565b01918252565b15610f8b57565b60405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606490fd5b15610fcb57565b60405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b6044820152606490fd5b9682859683968a94959699611018606090565b508a611024600061083c565b956001600160a01b0387166001600160a01b038916141561104490610cf7565b8442111561105190610e6a565b61105c846005610591565b61106590610eb3565b80157f12b246851a13a3216a99e5d8fb3b321e6ec2d3cea1eff08a997dd93151fc0ff99c6111136111759b61115d9a61110761114c9b610b489b6110e36103fb9b6111079a61113a9a6111b4575b6110bc90610ebd565b7f4f872536e1c5ce57c6ece6e282476cbe4b41d190b60136f6485314c5008900d895610f00565b6110f56110ee825190565b9160200190565b20604051978896602088019687610f0b565b908103825203826102fd565b61111e6110ee825190565b2061112960006109c4565b604051938492602084019283610f61565b6111456110ee825190565b2092610f00565b6001600160a01b0383161415610f84565b61116f6001600160a01b038716610aad565b14610fc4565b610e64610e516111ae60008061118a60405190565b806111968c8a83610d43565b0390878d5af1986109376111a86109ce565b9a610d4e565b95610588565b506110bc6111c361020d610a87565b6001600160a01b0385161490506110b3565b6111f7906111e761091b61020d610a87565b6109376000610932836005610591565b7f831aee9761aeb962fe7b0989140a3193e8e5e2354f5e10530616334a8255cdc361096660405190565b1561122857565b60405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606490fd5b906001600160a01b03906108c3565b9061128261015b6108e492610588565b8254611263565b90600019906108c3565b906112a361015b6108e492610b66565b8254611289565b67ffffffffffffffff811161031f5760208091020190565b909291926112d2610375826112aa565b938185526020808601920283019281841161013357915b8383106112f65750505050565b602080916113048486610228565b8152019201916112e9565b9080601f830112156101335781602061015b933591016112c2565b9060208282031261013357813567ffffffffffffffff81116101335761015b920161130f565b634e487b7160e01b600052603260045260246000fd5b9061136f825190565b811015611380576020809102010190565b611350565b92916113c76113ce926113a76113a261139e6004610eb3565b1590565b611221565b6113c06001966113b9600160046108cd565b6001611272565b6002611293565b6003611293565b6113d661151f565b826000936113e7610c736000610b66565b116113f3575b50505050565b81611401918493019061132a565b9261140c6000610b66565b915b156113ed5761141e61015b855190565b8210156114c45761145e82611444611437869588611366565b516001600160a01b031690565b611453610aad61020d8661083c565b036114645760010190565b9161140e565b61148084610932600561147a611437868c611366565b90610591565b6114906109376114378389611366565b7f425d2e6ca7b4c27e06a0b6c781a7a0d8a5661dba370a420150c9010a01b34fb36114ba60405190565b600090a260010190565b6113ed565b90959492610145946114fb611502926114f46080966114ed60a088019c6000890152565b6020870152565b6040850152565b6060830152565b01906001600160a01b03169052565b906112a361015b6108e49290565b61014561152d61015b61043c565b6115386110ee825190565b2061159b61154761015b61079e565b6115526110ee825190565b209161155d30610588565b9261110761156a60405190565b948593602085019346917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f866114c9565b6115a66110ee825190565b20600061151156fea264697066735822122039fd9f9d0c6dbe6dc8a2d77aa2fdb25a6539278fb1b475298f54b641e0c6b83264736f6c634300081c0033";

type StarglowTBAConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StarglowTBAConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StarglowTBA__factory extends ContractFactory {
  constructor(...args: StarglowTBAConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      StarglowTBA & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): StarglowTBA__factory {
    return super.connect(runner) as StarglowTBA__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StarglowTBAInterface {
    return new Interface(_abi) as StarglowTBAInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): StarglowTBA {
    return new Contract(address, _abi, runner) as unknown as StarglowTBA;
  }
}
