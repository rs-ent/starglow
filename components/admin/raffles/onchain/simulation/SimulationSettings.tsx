"use client";

import { useState, useCallback } from "react";
import {
    FaCalculator,
    FaCog,
    FaRocket,
    FaChartBar,
    FaInfoCircle,
    FaMagic,
    FaThLarge,
    FaBullseye,
    FaShieldAlt,
} from "react-icons/fa";
import {
    MdSpeed,
    MdPrecisionManufacturing,
    MdAutoAwesome,
} from "react-icons/md";

interface SimulationConfig {
    totalRuns: number;
    entryFee: number;
    batchSize: number;
    optimizationGoals?: {
        targetROI?: number;
        targetWinRate?: number;
        riskTolerance?: "conservative" | "moderate" | "aggressive";
        fairnessWeight?: number;
        profitabilityWeight?: number;
    };
}

interface EntryFeeAsset {
    id: string;
    name: string;
    symbol: string;
    description?: string;
    iconUrl?: string;
}

interface Props {
    config: SimulationConfig;
    onConfigChange: (config: SimulationConfig) => void;
    isRunning: boolean;
    entryFeeAsset?: EntryFeeAsset | null;
    onOptimizeSettings?: () => void;
}

const SIMULATION_PRESETS = [
    {
        name: "Îπ†Î•∏ ÌÖåÏä§Ìä∏",
        description: "Îπ†Î•∏ Í≤∞Í≥º ÌôïÏù∏Ïö© (Í∞úÎ∞ú/ÌÖåÏä§Ìä∏)",
        icon: MdSpeed,
        color: "text-green-400",
        config: {
            totalRuns: 1000,
            batchSize: 100,
            optimizationGoals: {
                riskTolerance: "moderate" as const,
                fairnessWeight: 0.5,
                profitabilityWeight: 0.5,
            },
        },
    },
    {
        name: "ÌëúÏ§Ä Î∂ÑÏÑù",
        description: "ÏùºÎ∞òÏ†ÅÏù∏ ÎûòÌîå Î∂ÑÏÑùÏö© (Í∂åÏû•)",
        icon: FaChartBar,
        color: "text-blue-400",
        config: {
            totalRuns: 10000,
            batchSize: 1000,
            optimizationGoals: {
                riskTolerance: "moderate" as const,
                fairnessWeight: 0.6,
                profitabilityWeight: 0.4,
            },
        },
    },
    {
        name: "Ï†ïÎ∞Ä Î∂ÑÏÑù",
        description: "ÎÜíÏùÄ Ï†ïÌôïÎèÑÍ∞Ä ÌïÑÏöîÌïú Ï§ëÏöî ÎûòÌîåÏö©",
        icon: MdPrecisionManufacturing,
        color: "text-purple-400",
        config: {
            totalRuns: 100000,
            batchSize: 5000,
            optimizationGoals: {
                riskTolerance: "conservative" as const,
                fairnessWeight: 0.7,
                profitabilityWeight: 0.3,
            },
        },
    },
    {
        name: "ÎåÄÍ∑úÎ™® Í≤ÄÏ¶ù",
        description: "ÏµúÎåÄ Ï†ïÌôïÎèÑ Î∂ÑÏÑù (ÏãúÍ∞Ñ ÏÜåÏöî)",
        icon: FaRocket,
        color: "text-red-400",
        config: {
            totalRuns: 1000000,
            batchSize: 10000,
            optimizationGoals: {
                riskTolerance: "conservative" as const,
                fairnessWeight: 0.8,
                profitabilityWeight: 0.2,
            },
        },
    },
];

const RISK_TOLERANCE_OPTIONS = [
    {
        value: "conservative",
        label: "Î≥¥ÏàòÏ†Å",
        description: "ÏïàÏ†ïÏÑ±Í≥º Í≥µÏ†ïÏÑ± Ïö∞ÏÑ†",
        icon: FaShieldAlt,
        color: "text-green-400",
    },
    {
        value: "moderate",
        label: "Í∑†Ìòï",
        description: "Î¶¨Ïä§ÌÅ¨ÏôÄ ÏàòÏùµÏùò Í∑†Ìòï",
        icon: FaThLarge,
        color: "text-blue-400",
    },
    {
        value: "aggressive",
        label: "Í≥µÍ≤©Ï†Å",
        description: "ÏàòÏùµÏÑ± ÏµúÏö∞ÏÑ†",
        icon: FaBullseye,
        color: "text-red-400",
    },
] as const;

export default function SimulationSettings({
    config,
    onConfigChange,
    isRunning,
    entryFeeAsset,
    onOptimizeSettings,
}: Props) {
    const [showAdvanced, setShowAdvanced] = useState(false);

    const handlePresetSelect = useCallback(
        (preset: (typeof SIMULATION_PRESETS)[0]) => {
            onConfigChange({
                ...config,
                ...preset.config,
            });
        },
        [config, onConfigChange]
    );

    const updateConfig = useCallback(
        (updates: Partial<SimulationConfig>) => {
            onConfigChange({
                ...config,
                ...updates,
            });
        },
        [config, onConfigChange]
    );

    const updateOptimizationGoals = useCallback(
        (
            updates: Partial<NonNullable<SimulationConfig["optimizationGoals"]>>
        ) => {
            onConfigChange({
                ...config,
                optimizationGoals: {
                    ...config.optimizationGoals,
                    ...updates,
                },
            });
        },
        [config, onConfigChange]
    );

    const getEstimatedTime = (runs: number, batchSize: number) => {
        const timePerBatch = 50; // milliseconds
        const totalTime = (runs / batchSize) * timePerBatch;

        if (totalTime < 1000) {
            return `~${Math.ceil(totalTime)}ms`;
        } else if (totalTime < 60000) {
            return `~${(totalTime / 1000).toFixed(1)}Ï¥à`;
        } else {
            return `~${(totalTime / 60000).toFixed(1)}Î∂Ñ`;
        }
    };

    return (
        <div className="space-y-6">
            {/* Ìó§Îçî */}
            <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                    <div className="p-3 bg-blue-900/30 rounded-xl">
                        <FaCalculator className="text-2xl text-blue-400" />
                    </div>
                    <div>
                        <h3 className="text-lg font-semibold text-white">
                            ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏÑ§Ï†ï
                        </h3>
                        <p className="text-blue-300 text-sm">
                            {entryFeeAsset
                                ? `${entryFeeAsset.symbol} Í∏∞Î∞ò Î∂ÑÏÑù`
                                : "ÎûòÌîå Î∂ÑÏÑù Îß§Í∞úÎ≥ÄÏàò ÏÑ§Ï†ï"}
                        </p>
                    </div>
                </div>

                {onOptimizeSettings && (
                    <button
                        onClick={onOptimizeSettings}
                        disabled={isRunning}
                        className="flex items-center gap-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg text-sm transition-colors disabled:opacity-50"
                    >
                        <FaMagic />
                        AI ÏµúÏ†ÅÌôî
                    </button>
                )}
            </div>

            {/* Asset Ï†ïÎ≥¥ */}
            {entryFeeAsset && (
                <div className="bg-cyan-900/30 border border-cyan-700 rounded-lg p-4">
                    <h4 className="text-sm font-semibold text-cyan-300 mb-2 flex items-center gap-2">
                        üíé Ï∞∏Í∞ÄÎπÑ Asset Ï†ïÎ≥¥
                    </h4>
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-3 text-sm">
                        <div>
                            <span className="text-gray-300">Ïù¥Î¶Ñ:</span>
                            <span className="text-white ml-2">
                                {entryFeeAsset.name}
                            </span>
                        </div>
                        <div>
                            <span className="text-gray-300">Ïã¨Î≥º:</span>
                            <span className="text-cyan-400 ml-2 font-medium">
                                {entryFeeAsset.symbol}
                            </span>
                        </div>
                        {entryFeeAsset.description && (
                            <div className="lg:col-span-2">
                                <span className="text-gray-300">ÏÑ§Î™Ö:</span>
                                <span className="text-gray-200 ml-2">
                                    {entryFeeAsset.description}
                                </span>
                            </div>
                        )}
                    </div>
                </div>
            )}

            {/* ÌîÑÎ¶¨ÏÖã ÏÑ†ÌÉù */}
            <div className="bg-gray-800/50 rounded-xl p-6 border border-gray-700">
                <h4 className="text-md font-semibold text-white mb-4 flex items-center gap-2">
                    <MdAutoAwesome className="text-yellow-400" />
                    Îπ†Î•∏ ÏÑ§Ï†ï ÌîÑÎ¶¨ÏÖã
                </h4>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-3">
                    {SIMULATION_PRESETS.map((preset, index) => (
                        <button
                            key={index}
                            onClick={() => handlePresetSelect(preset)}
                            disabled={isRunning}
                            className="p-4 bg-gray-700/50 hover:bg-gray-600/50 border border-gray-600 hover:border-gray-500 rounded-lg transition-all text-left disabled:opacity-50"
                        >
                            <div className="flex items-center gap-3 mb-2">
                                <preset.icon
                                    className={`text-lg ${preset.color}`}
                                />
                                <span className="font-medium text-white">
                                    {preset.name}
                                </span>
                            </div>
                            <p className="text-sm text-gray-300 mb-2">
                                {preset.description}
                            </p>
                            <div className="flex items-center gap-4 text-xs text-gray-400">
                                <span>
                                    {preset.config.totalRuns.toLocaleString()}Ìöå
                                </span>
                                <span>Î∞∞Ïπò: {preset.config.batchSize}</span>
                                <span>
                                    {getEstimatedTime(
                                        preset.config.totalRuns,
                                        preset.config.batchSize
                                    )}
                                </span>
                            </div>
                        </button>
                    ))}
                </div>
            </div>

            {/* Í∏∞Î≥∏ ÏÑ§Ï†ï */}
            <div className="bg-gray-800/50 rounded-xl p-6 border border-gray-700">
                <h4 className="text-md font-semibold text-white mb-4 flex items-center gap-2">
                    <FaCog className="text-gray-400" />
                    Í∏∞Î≥∏ ÏÑ§Ï†ï
                </h4>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                            ÏãúÎÆ¨Î†àÏù¥ÏÖò ÌöüÏàò
                        </label>
                        <select
                            value={config.totalRuns}
                            onChange={(e) =>
                                updateConfig({
                                    totalRuns: parseInt(e.target.value),
                                })
                            }
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white"
                            disabled={isRunning}
                        >
                            <option value={1000}>1,000Ìöå (Îπ†Î•∏ ÌÖåÏä§Ìä∏)</option>
                            <option value={10000}>10,000Ìöå (ÌëúÏ§Ä)</option>
                            <option value={100000}>100,000Ìöå (Ï†ïÎ∞Ä)</option>
                            <option value={1000000}>
                                1,000,000Ìöå (ÏµúÍ≥† Ï†ïÌôïÎèÑ)
                            </option>
                        </select>
                        <p className="text-xs text-gray-500 mt-1">
                            ÏòàÏÉÅ ÏÜåÏöîÏãúÍ∞Ñ:{" "}
                            {getEstimatedTime(
                                config.totalRuns,
                                config.batchSize
                            )}
                        </p>
                    </div>

                    <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                            Ï∞∏Í∞ÄÎπÑ{" "}
                            {entryFeeAsset && `(${entryFeeAsset.symbol})`}
                        </label>
                        <input
                            type="number"
                            value={config.entryFee}
                            onChange={(e) =>
                                updateConfig({
                                    entryFee: parseFloat(e.target.value) || 0,
                                })
                            }
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white"
                            disabled={isRunning}
                            min="0"
                            step="0.01"
                        />
                        {entryFeeAsset && (
                            <p className="text-xs text-gray-500 mt-1">
                                Smart ContractÏóêÏÑú ÏûêÎèô Î°úÎìúÎê®
                            </p>
                        )}
                    </div>

                    <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                            Î∞∞Ïπò ÌÅ¨Í∏∞ (ÏÑ±Îä• Ï°∞Ï†à)
                        </label>
                        <select
                            value={config.batchSize}
                            onChange={(e) =>
                                updateConfig({
                                    batchSize: parseInt(e.target.value),
                                })
                            }
                            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white"
                            disabled={isRunning}
                        >
                            <option value={100}>
                                100 (ÎäêÎ¶º, Ï†ïÌôïÌïú ÏßÑÌñâÎ•†)
                            </option>
                            <option value={1000}>1,000 (Í∑†Ìòï)</option>
                            <option value={5000}>5,000 (Îπ†Î¶Ñ)</option>
                            <option value={10000}>10,000 (Îß§Ïö∞ Îπ†Î¶Ñ)</option>
                        </select>
                        <p className="text-xs text-gray-500 mt-1">
                            ÏûëÏùÑÏàòÎ°ù Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏, ÌÅ¥ÏàòÎ°ù ÏÑ±Îä• Ìñ•ÏÉÅ
                        </p>
                    </div>
                </div>
            </div>

            {/* Í≥†Í∏â ÏÑ§Ï†ï */}
            <div className="bg-gray-800/50 rounded-xl p-6 border border-gray-700">
                <button
                    onClick={() => setShowAdvanced(!showAdvanced)}
                    className="flex items-center justify-between w-full text-left"
                >
                    <h4 className="text-md font-semibold text-white flex items-center gap-2">
                        <FaMagic className="text-purple-400" />
                        AI ÏµúÏ†ÅÌôî Î™©Ìëú ÏÑ§Ï†ï
                    </h4>
                    <FaInfoCircle
                        className={`text-gray-400 transition-transform ${
                            showAdvanced ? "rotate-180" : ""
                        }`}
                    />
                </button>

                {showAdvanced && (
                    <div className="mt-6 space-y-6">
                        {/* ÏúÑÌóò ÌóàÏö©ÎèÑ */}
                        <div>
                            <label className="block text-sm font-medium text-gray-300 mb-3">
                                ÏúÑÌóò ÌóàÏö©ÎèÑ
                            </label>
                            <div className="grid grid-cols-1 lg:grid-cols-3 gap-3">
                                {RISK_TOLERANCE_OPTIONS.map((option) => (
                                    <button
                                        key={option.value}
                                        onClick={() =>
                                            updateOptimizationGoals({
                                                riskTolerance: option.value,
                                            })
                                        }
                                        disabled={isRunning}
                                        className={`p-4 border rounded-lg transition-all text-left ${
                                            config.optimizationGoals
                                                ?.riskTolerance === option.value
                                                ? "border-purple-500 bg-purple-900/30"
                                                : "border-gray-600 bg-gray-700/30 hover:border-gray-500"
                                        }`}
                                    >
                                        <div className="flex items-center gap-3 mb-2">
                                            <option.icon
                                                className={`text-lg ${option.color}`}
                                            />
                                            <span className="font-medium text-white">
                                                {option.label}
                                            </span>
                                        </div>
                                        <p className="text-sm text-gray-300">
                                            {option.description}
                                        </p>
                                    </button>
                                ))}
                            </div>
                        </div>

                        {/* Î™©Ìëú ÏÑ§Ï†ï */}
                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <div>
                                <label className="block text-sm font-medium text-gray-300 mb-2">
                                    Î™©Ìëú ROI (%)
                                </label>
                                <input
                                    type="number"
                                    value={
                                        config.optimizationGoals?.targetROI ||
                                        ""
                                    }
                                    onChange={(e) =>
                                        updateOptimizationGoals({
                                            targetROI: e.target.value
                                                ? parseFloat(e.target.value)
                                                : undefined,
                                        })
                                    }
                                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white"
                                    disabled={isRunning}
                                    placeholder="Ïòà: 5.0"
                                    step="0.1"
                                />
                                <p className="text-xs text-gray-500 mt-1">
                                    AIÍ∞Ä Ïù¥ Î™©ÌëúÏóê ÎßûÏ∂∞ ÏµúÏ†ÅÌôî Ï†úÏïà
                                </p>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-300 mb-2">
                                    Î™©Ìëú ÎãπÏ≤®Î•† (%)
                                </label>
                                <input
                                    type="number"
                                    value={
                                        config.optimizationGoals
                                            ?.targetWinRate || ""
                                    }
                                    onChange={(e) =>
                                        updateOptimizationGoals({
                                            targetWinRate: e.target.value
                                                ? parseFloat(e.target.value)
                                                : undefined,
                                        })
                                    }
                                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white"
                                    disabled={isRunning}
                                    placeholder="Ïòà: 25.0"
                                    min="0"
                                    max="100"
                                    step="0.1"
                                />
                                <p className="text-xs text-gray-500 mt-1">
                                    Ï∞∏Ïó¨Ïûê ÎßåÏ°±ÎèÑÏóê ÏòÅÌñ•
                                </p>
                            </div>
                        </div>

                        {/* Í∞ÄÏ§ëÏπò ÏÑ§Ï†ï */}
                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <div>
                                <label className="block text-sm font-medium text-gray-300 mb-2">
                                    Í≥µÏ†ïÏÑ± Ï§ëÏöîÎèÑ:{" "}
                                    {(
                                        (config.optimizationGoals
                                            ?.fairnessWeight || 0.5) * 100
                                    ).toFixed(0)}
                                    %
                                </label>
                                <input
                                    type="range"
                                    value={
                                        config.optimizationGoals
                                            ?.fairnessWeight || 0.5
                                    }
                                    onChange={(e) =>
                                        updateOptimizationGoals({
                                            fairnessWeight: parseFloat(
                                                e.target.value
                                            ),
                                        })
                                    }
                                    className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
                                    disabled={isRunning}
                                    min="0"
                                    max="1"
                                    step="0.1"
                                />
                                <div className="flex justify-between text-xs text-gray-500 mt-1">
                                    <span>ÎÇÆÏùå</span>
                                    <span>ÎÜíÏùå</span>
                                </div>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-300 mb-2">
                                    ÏàòÏùµÏÑ± Ï§ëÏöîÎèÑ:{" "}
                                    {(
                                        (config.optimizationGoals
                                            ?.profitabilityWeight || 0.5) * 100
                                    ).toFixed(0)}
                                    %
                                </label>
                                <input
                                    type="range"
                                    value={
                                        config.optimizationGoals
                                            ?.profitabilityWeight || 0.5
                                    }
                                    onChange={(e) =>
                                        updateOptimizationGoals({
                                            profitabilityWeight: parseFloat(
                                                e.target.value
                                            ),
                                        })
                                    }
                                    className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
                                    disabled={isRunning}
                                    min="0"
                                    max="1"
                                    step="0.1"
                                />
                                <div className="flex justify-between text-xs text-gray-500 mt-1">
                                    <span>ÎÇÆÏùå</span>
                                    <span>ÎÜíÏùå</span>
                                </div>
                            </div>
                        </div>

                        <div className="bg-blue-900/30 border border-blue-700 rounded-lg p-4">
                            <div className="flex items-center gap-2 mb-2">
                                <FaInfoCircle className="text-blue-400" />
                                <span className="text-sm font-medium text-blue-300">
                                    AI ÏµúÏ†ÅÌôî ÌåÅ
                                </span>
                            </div>
                            <ul className="text-xs text-blue-200 space-y-1">
                                <li>
                                    ‚Ä¢ Í≥µÏ†ïÏÑ± Ï§ëÏöîÎèÑÍ∞Ä ÎÜíÏùÑÏàòÎ°ù Í∑†Îì±Ìïú ÎãπÏ≤®
                                    ÌôïÎ•†ÏùÑ Í∂åÏû•
                                </li>
                                <li>
                                    ‚Ä¢ ÏàòÏùµÏÑ± Ï§ëÏöîÎèÑÍ∞Ä ÎÜíÏùÑÏàòÎ°ù ROI ÏµúÏ†ÅÌôîÏóê ÏßëÏ§ë
                                </li>
                                <li>
                                    ‚Ä¢ Î≥¥ÏàòÏ†Å ÏÑ§Ï†ïÏùÄ ÏïàÏ†ïÏÑ±ÏùÑ, Í≥µÍ≤©Ï†Å ÏÑ§Ï†ïÏùÄ
                                    ÏàòÏùµÏÑ±ÏùÑ Ïö∞ÏÑ†Ïãú
                                </li>
                                <li>
                                    ‚Ä¢ Î™©ÌëúÍ∞íÏùÑ ÏÑ§Ï†ïÌïòÎ©¥ Îçî Ï†ïÍµêÌïú ÏµúÏ†ÅÌôî Ï†úÏïàÏùÑ
                                    Î∞õÏùÑ Ïàò ÏûàÏùå
                                </li>
                            </ul>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}
