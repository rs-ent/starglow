//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table User {
  id String [pk]
  name String
  email String [unique]
  emailVerified DateTime
  image String
  role String [not null, default: 'user']
  active Boolean [not null, default: true]
  createdAt DateTime [default: `now()`, not null]
  lastLoginAt DateTime
  accounts Account [not null]
  loginAttempts LoginAttemptLog [not null]
  player Player
  sessions Session [not null]
  wallets Wallet [not null]
  payments Payment [not null]
}

Table Account {
  id String [pk]
  userId String [not null]
  type String [not null]
  provider String [not null]
  providerAccountId String [not null]
  refresh_token String
  access_token String
  expires_at Int
  token_type String
  scope String
  id_token String
  session_state String
  user User [not null]

  indexes {
    (provider, providerAccountId) [unique]
  }
}

Table Session {
  id String [pk]
  sessionToken String [unique, not null]
  userId String [not null]
  expires DateTime [not null]
  user User [not null]
}

Table Wallet {
  id String [pk]
  userId String [not null]
  address String [unique, not null]
  privateKey String
  keyHash String
  nonce String
  network String [not null]
  default Boolean [not null, default: false]
  primary Int [default: 0]
  nickname String
  status WalletStatus [not null, default: 'ACTIVE']
  payments Payment [not null]
  createdAt DateTime [default: `now()`, not null]
  lastAccessedAt DateTime [not null]
  user User [not null]
}

Table Player {
  id String [pk]
  userId String [unique]
  telegramId String [unique]
  name String
  points Int [not null, default: 0]
  SGP Int [not null, default: 0]
  SGT Int [not null, default: 0]
  recommendedCount Int [not null, default: 0]
  recommenderId String
  recommenderName String
  recommenderMethod String
  createdAt DateTime [default: `now()`, not null]
  lastConnectedAt DateTime [not null]
  user User
  pollLogs PollLog [not null]
  questLogs QuestLog [not null]
  rewardLogs RewardsLog [not null]
}

Table Quest {
  id String [pk]
  title String [not null]
  description String
  url String
  icon String
  rewards Int [not null, default: 800]
  rewardCurrency RewardCurrency [not null, default: 'points']
  startDate DateTime
  endDate DateTime
  permanent Boolean [not null, default: false]
  visible Boolean [not null, default: true]
  primary Int [default: 0]
  effects String
  type String
  questLogs QuestLog [not null]
  rewardLogs RewardsLog [not null]
}

Table QuestLog {
  id String [pk]
  playerId String [not null]
  questId String [not null]
  completed Boolean [not null, default: false]
  completedAt DateTime [default: `now()`, not null]
  rewards Int [not null, default: 0]
  rewardCurrency RewardCurrency [not null, default: 'points']
  createdAt DateTime [default: `now()`, not null]
  player Player [not null]
  quest Quest [not null]
  rewardLogs RewardsLog [not null]
}

Table Poll {
  id String [pk]
  title String [not null]
  titleShorten String
  options String[] [not null]
  optionsShorten String[] [not null]
  bannerImg String
  startDate DateTime [default: `now()`, not null]
  endDate DateTime [default: `now()`, not null]
  exposeInScheduleTab Boolean [not null, default: false]
  openPromotionText String
  openPromotionImg String
  resultPromotionText String
  resultPromotionImg String
  totalVotes Int [not null, default: 0]
  totalVotesByOption Int[] [not null]
  totalBetsAmount Int [not null, default: 0]
  totalBetsAmountByOption Int[] [not null]
  results Int[] [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  pollLogs PollLog [not null]
  rewardLogs RewardsLog [not null]
}

Table PollLog {
  id String [pk]
  playerId String [not null]
  pollId String [not null]
  option String [not null]
  betAmount Int [not null, default: 0]
  createdAt DateTime [default: `now()`, not null]
  player Player [not null]
  poll Poll [not null]
  rewardLogs RewardsLog [not null]
}

Table RewardsLog {
  id String [pk]
  playerId String [not null]
  questId String
  questLogId String
  pollId String
  pollLogId String
  amount Int [not null]
  currency RewardCurrency [not null, default: 'points']
  reason String
  createdAt DateTime [default: `now()`, not null]
  player Player [not null]
  poll Poll
  pollLog PollLog
  quest Quest
  questLog QuestLog
}

Table Events {
  id String [pk]
  category EventCategory [not null, default: 'other']
  title String [not null]
  description String
  content Json
  url String
  status EventStatus [not null, default: 'upcoming']
  bannerImg String
  bannerImg2 String
  galleryImgs String[] [not null]
  detailImg Json
  saleStartDate DateTime
  saleEndDate DateTime
  price Int
  capacity Int
  ageLimit Int
  organizer String
  organizerImg String
  organizerUrl String
  contact String
  startDate DateTime [not null]
  endDate DateTime [not null]
  location String
  locationAddress String
  locationImg String
  locationUrl String
  locationLat Float
  locationLng Float
  artist String
  artistImg String
  artistUrl String
  tags String[] [not null]
  hashtags String[] [not null]
  promotionText String
  promotionImg String
  isFeatured Boolean [not null, default: false]
  viewCount Int [not null, default: 0]
  bookmarkCount Int [not null, default: 0]
  isActive Boolean [not null, default: true]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Table StoredFiles {
  id String [pk]
  name String
  url String [unique, not null]
  type String
  sourceUrl String
  alt String
  width Int
  height Int
  mimeType String
  sizeBytes Int
  metadata Json
  order Int [default: 0]
  purpose String
  bucket String [not null]
  expiresAt DateTime
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]

  indexes {
    (sourceUrl, type) [unique]
  }
}

Table LoginAttemptLog {
  id String [pk]
  userId String
  email String
  provider String
  success Boolean [not null]
  error String
  ipAddress String
  userAgent String
  timestamp DateTime [default: `now()`, not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  user User
}

Table Payment {
  id String [pk]
  userId String
  user User
  storeId String [not null]
  channelKey String [not null]
  productTable String [not null]
  productId String [not null]
  productName String [not null]
  productDefaultCurrency String [not null]
  amount Int [not null]
  quantity Int [not null]
  currency String [not null]
  payMethod String [not null]
  easyPayProvider String
  cardProvider String
  cardInstallmentMonths Int
  cardInterestFree Boolean
  cardApproveNumber String
  cardNumber String
  promotionCode String
  promotion PaymentPromotion
  isPromotionApplied Boolean [not null, default: false]
  exchangeRate Float
  exchangeRateProvider String
  exchangeRateTimestamp DateTime
  originalProductPrice Int
  convertedPrice Int
  status PaymentStatus [not null, default: 'PENDING']
  statusReason String
  paidAt DateTime
  cancelledAt DateTime
  failedAt DateTime
  refundedAt DateTime
  completedAt DateTime
  cancelAmount Int
  code String
  message String
  paymentId String
  pgCode String
  pgMessage String
  transactionType String
  txId String
  pgResponse Json
  virtualAccount VirtualAccount
  needWallet Boolean [not null, default: false]
  receiverWalletAddress String
  receiverWallet Wallet
  postProcessResult Json
  postProcessResultAt DateTime
  webhookEvents WebhookEvent [not null]
  metadata Json
  redirectUrl String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Table PaymentPromotion {
  id String [pk]
  code String [unique, not null]
  startDate DateTime [not null]
  endDate DateTime [not null]
  discountType PaymentPromotionDiscountType [not null, default: 'percentage']
  discountValue Int [not null]
  isActive Boolean [not null, default: true]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  payments Payment [not null]
}

Table WebhookEvent {
  id String [pk]
  paymentId String
  payment Payment
  description String
  payload Json
  createdAt DateTime [default: `now()`, not null]
}

Table VirtualAccount {
  id String [pk]
  paymentId String [unique, not null]
  payment Payment [not null]
  bankCode String [not null]
  accountNumber String [not null]
  holderName String [not null]
  expiresAt DateTime [not null]
  depositedAt DateTime
  depositorName String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Table ExchangeRate {
  id String [pk]
  fromCurrency String [not null]
  toCurrency String [not null]
  rate Float [not null]
  provider String [not null]
  createdAt DateTime [default: `now()`, not null]
}

Table BlockchainNetwork {
  id String [pk]
  name String [unique, not null]
  chainId Int [unique, not null]
  rpcUrl String [not null]
  explorerUrl String [not null]
  symbol String [not null]
  isTestnet Boolean [not null, default: true]
  isActive Boolean [not null, default: true]
  factoryContracts FactoryContract [not null]
  collectionContracts CollectionContract [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  nfts NFT [not null]
}

Table FactoryContract {
  id String [pk]
  address String [not null]
  networkId String [not null]
  network BlockchainNetwork [not null]
  deployedAt DateTime [default: `now()`, not null]
  deployedBy String
  transactionHash String
  isActive Boolean [not null, default: true]
  collections String[] [not null]
  collectionContracts CollectionContract [not null]

  indexes {
    (address, networkId) [unique]
  }
}

Table EscrowWallet {
  id String [pk]
  address String [unique, not null]
  privateKey String [not null]
  keyHash String [not null]
  nonce String [not null]
  networkIds String[] [not null]
  isActive Boolean [not null, default: true]
  balance Json
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Table IpfsGroup {
  id String [pk]
  pinataId String [unique, not null]
  name String [unique, not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  files IpfsFile [not null]
}

Table IpfsFile {
  id String [pk]
  type String [not null, default: 'nft-metadata']
  url String [not null, default: 'ipfs://']
  pinataId String [not null]
  name String [not null]
  cid String [not null]
  size Int [not null]
  numberOfFiles Int [not null]
  mimeType String [not null]
  groupId String
  group IpfsGroup
  keyvalues Json
  vectorized Boolean [not null, default: false]
  network String
  gateway String [not null, default: 'ipfs://']
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Table Metadata {
  id String [pk]
  collectionKey String [not null]
  metadata Json [not null]
  url String [not null, default: 'ipfs://']
  type MetadataType [not null, default: 'collection']
  tokenId Int
  collectionAddress String [unique]
  collectionContract CollectionContract
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]

  indexes {
    (collectionAddress, tokenId) [unique]
  }
}

Table CollectionContract {
  id String [pk]
  key String [unique, not null]
  address String [unique, not null]
  name String [not null]
  symbol String [not null]
  maxSupply Int [not null]
  mintPrice String [not null]
  baseURI String [not null]
  contractURI String [not null]
  factoryId String [not null]
  factory FactoryContract [not null]
  networkId String [not null]
  network BlockchainNetwork [not null]
  createdBy String [not null, default: 'admin']
  txHash String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  nfts NFT [not null]
  events NFTEvent [not null]
  price Int [not null, default: 0]
  circulation Int [not null, default: 1000]
  mintedCount Int [not null, default: 0]
  isListed Boolean [not null, default: false]
  artistId String
  artist Artist
  metadata Metadata
}

Table NFT {
  id String [pk]
  tokenId Int [not null]
  collectionId String [not null]
  collection CollectionContract [not null]
  ownerAddress String [not null]
  metadataUri String
  mintedAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  transactionHash String [not null]
  networkId String [not null]
  network BlockchainNetwork [not null]
  name String
  description String
  imageUrl String
  attributes Json
  isListed Boolean [not null, default: false]
  listingPrice String
  lastTransferredAt DateTime
  transferCount Int [not null, default: 0]
  isBurned Boolean [not null, default: false]
  rarity Float
  tags String[] [not null]
  category String
  creatorInfo String
  externalUrl String
  mintPrice String
  mintedBy String
  royaltyInfo Json
  events NFTEvent [not null]
}

Table NFTEvent {
  id String [pk]
  nftId String [not null]
  nft NFT [not null]
  collectionId String [not null]
  collection CollectionContract [not null]
  eventType String [not null]
  fromAddress String
  toAddress String
  price String
  transactionHash String [not null]
  timestamp DateTime [default: `now()`, not null]
  blockNumber Int
}

Table Artist {
  id String [pk]
  name String [not null]
  description String
  imageUrl String
  externalUrl String
  reportUrl String
  members ArtistMember [not null]
  company String
  sns String[] [not null]
  gallery String[] [not null]
  videos String[] [not null]
  music String[] [not null]
  events String[] [not null]
  additionalInfo Json
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  collectionContracts CollectionContract [not null]
}

Table ArtistMember {
  id String [pk]
  artistId String [not null]
  artist Artist [not null]
  name String [not null]
  role String [not null]
  imageUrl String
  externalUrl String
  description String
  realName String
  birthDate DateTime
  birthPlace String
  nationality String
  height Int
  weight Int
  bloodType String
  constellation String
  sns String[] [not null]
  gallery String[] [not null]
  videos String[] [not null]
  music String[] [not null]
  additionalInfo Json
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Enum PaymentStatus {
  PENDING
  AWAITING_DEPOSIT
  PAID
  CANCELLED
  FAILED
  EXPIRED
  REFUNDED
  PARTIALLY_CANCELLED
  COMPLETED
}

Enum PaymentPromotionDiscountType {
  percentage
  amount
}

Enum RewardCurrency {
  points
  SGP
  SGT
}

Enum EventCategory {
  concert
  fanmeeting
  fancamp
  festival
  exhibition
  other
}

Enum EventStatus {
  upcoming
  ongoing
  completed
  cancelled
}

Enum WalletStatus {
  ACTIVE
  INACTIVE
  LOCKED
}

Enum MetadataType {
  collection
  nft
}

Ref: Account.userId > User.id [delete: Cascade]

Ref: Session.userId > User.id [delete: Cascade]

Ref: Wallet.userId > User.id [delete: Cascade]

Ref: Player.userId - User.id [delete: Cascade]

Ref: QuestLog.playerId > Player.id [delete: Cascade]

Ref: QuestLog.questId > Quest.id

Ref: PollLog.playerId > Player.id [delete: Cascade]

Ref: PollLog.pollId > Poll.id

Ref: RewardsLog.playerId > Player.id [delete: Cascade]

Ref: RewardsLog.pollId > Poll.id

Ref: RewardsLog.pollLogId > PollLog.id

Ref: RewardsLog.questId > Quest.id

Ref: RewardsLog.questLogId > QuestLog.id

Ref: LoginAttemptLog.userId > User.id [delete: Cascade]

Ref: Payment.userId > User.id

Ref: Payment.promotionCode > PaymentPromotion.code

Ref: Payment.receiverWalletAddress > Wallet.address

Ref: WebhookEvent.paymentId > Payment.id [delete: Cascade]

Ref: VirtualAccount.paymentId - Payment.id [delete: Cascade]

Ref: FactoryContract.networkId > BlockchainNetwork.id

Ref: IpfsFile.groupId > IpfsGroup.pinataId

Ref: Metadata.collectionAddress - CollectionContract.address

Ref: CollectionContract.factoryId > FactoryContract.id

Ref: CollectionContract.networkId > BlockchainNetwork.id

Ref: CollectionContract.artistId > Artist.id

Ref: NFT.collectionId > CollectionContract.id

Ref: NFT.networkId > BlockchainNetwork.id

Ref: NFTEvent.nftId > NFT.id

Ref: NFTEvent.collectionId > CollectionContract.id

Ref: ArtistMember.artistId > Artist.id