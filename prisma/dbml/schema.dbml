//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table User {
  id String [pk]
  name String
  email String [unique]
  emailVerified DateTime
  password String
  phone String
  image String
  role String [not null, default: 'user']
  active Boolean [not null, default: true]
  createdAt DateTime [default: `now()`, not null]
  lastLoginAt DateTime
  provider String
  telegramId String [unique]
  accounts Account [not null]
  collectionParticipants CollectionParticipant [not null]
  loginAttempts LoginAttemptLog [not null]
  payments Payment [not null]
  player Player
  sessions Session [not null]
  wallets Wallet [not null]
  discordId String
  discordCode DiscordCode [not null]
}

Table Account {
  id String [pk]
  userId String [not null]
  type String [not null]
  provider String [not null]
  providerAccountId String [not null]
  refresh_token String
  access_token String
  expires_at Int
  token_type String
  scope String
  id_token String
  session_state String
  user User [not null]

  indexes {
    (provider, providerAccountId) [unique]
  }
}

Table DiscordAccount {
  id String [pk]
  discordId String [unique, not null]
  userIds String[] [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Table DiscordCode {
  id String [pk]
  code String [unique, not null]
  expiresAt DateTime [not null]
  userId String [not null]
  user User [not null]
}

Table VerificationToken {
  identifier String [not null]
  token String [unique, not null]
  expires DateTime [not null]

  indexes {
    (identifier, token) [unique]
  }
}

Table Session {
  id String [pk]
  sessionToken String [unique, not null]
  userId String [not null]
  expires DateTime [not null]
  user User [not null]
}

Table Wallet {
  id String [pk]
  userId String [not null]
  address String [unique, not null]
  privateKey String
  network String [not null]
  provider String [not null, default: 'starglow']
  createdAt DateTime [default: `now()`, not null]
  default Boolean [not null, default: false]
  primary Int [default: 0]
  lastAccessedAt DateTime [not null]
  nickname String
  status WalletStatus [not null, default: 'ACTIVE']
  keyHash String
  nonce String
  payments Payment [not null]
  user User [not null]
}

Table Player {
  id String [pk]
  userId String [unique]
  telegramId String [unique]
  tweetAuthorId String [unique]
  tweetVerified Boolean [not null, default: false]
  name String
  nickname String
  image String
  email String
  referralCount Int [not null, default: 0]
  referredBy String
  referredMethod String
  referredAt DateTime [default: `now()`, not null]
  createdAt DateTime [default: `now()`, not null]
  lastConnectedAt DateTime [not null]
  referralCode String [unique, not null]
  artistFeedReactions ArtistFeedReaction [not null]
  referrer Player
  referredPlayers Player [not null]
  tweetAuthor TweetAuthor
  user User
  playerAssets PlayerAsset [not null]
  pollLogs PollLog [not null]
  questLogs QuestLog [not null]
  referredPlayerLogs ReferralLog [not null]
  referrerPlayerLogs ReferralLog [not null]
  rewardLogs RewardsLog [not null]

  indexes {
    (userId, telegramId) [unique]
  }
}

Table PlayerOldData {
  id String [pk]
  telegramId String [unique, not null]
  name String
  points Int [not null, default: 0]
  referrerTelegramId String
  createdAt DateTime [default: `now()`, not null]
}

Table ReferralLog {
  id String [pk]
  referredPlayerId String [not null]
  referrerPlayerId String [not null]
  method String
  createdAt DateTime [default: `now()`, not null]
  referredPlayer Player [not null]
  referrerPlayer Player [not null]

  indexes {
    (referredPlayerId, referrerPlayerId) [unique]
  }
}

Table PlayerAsset {
  id String [pk]
  playerId String [not null]
  assetId String [not null]
  balance Int [not null, default: 0]
  status PlayerAssetStatus [not null, default: 'ACTIVE']
  updatedAt DateTime [not null]
  asset Asset [not null]
  player Player [not null]

  indexes {
    (playerId, assetId) [unique]
  }
}

Table Quest {
  id String [pk]
  title String [not null]
  questType QuestType [not null, default: 'URL']
  description String
  url String
  urls String[] [not null]
  icon String
  imgUrl String
  youtubeUrl String
  rewardAssetId String
  rewardAmount Int
  startDate DateTime
  endDate DateTime
  needToken Boolean [not null, default: false]
  needTokenAddress String
  repeatable Boolean [not null, default: false]
  repeatableCount Int
  repeatableInterval Int
  multiClaimable Boolean [not null, default: false]
  multiClaimLimit Int
  multiClaimInterval Int
  isReferral Boolean [not null, default: false]
  referralCount Int
  permanent Boolean [not null, default: false]
  isActive Boolean [not null, default: true]
  order Int [default: 0]
  effects String
  type String
  artistId String
  artist Artist
  rewardAsset Asset
  questLogs QuestLog [not null]
  rewardLogs RewardsLog [not null]
}

Table QuestLog {
  id String [pk]
  playerId String [not null]
  questId String [not null]
  completed Boolean [not null, default: false]
  completedAt DateTime
  rewardAssetId String
  rewardAmount Int
  repeatCount Int [not null, default: 1]
  completedDates DateTime[] [not null]
  reclaimable Boolean [not null, default: false]
  claimedDates DateTime[] [not null]
  deprecated Boolean [not null, default: false]
  createdAt DateTime [default: `now()`, not null]
  isClaimed Boolean [not null, default: false]
  claimedAt DateTime
  player Player [not null]
  quest Quest [not null]
  rewardAsset Asset
  rewardLogs RewardsLog [not null]

  indexes {
    (playerId, questId) [unique]
  }
}

Table Poll {
  id String [pk]
  title String [not null]
  titleShorten String
  description String
  category PollCategory [not null, default: 'PUBLIC']
  status PollStatus [not null, default: 'UPCOMING']
  isActive Boolean [not null, default: false]
  options Json[] [not null]
  optionsOrder String[] [not null]
  hasAnswer Boolean [not null, default: false]
  answerOptionIds String[] [not null]
  imgUrl String
  youtubeUrl String
  startDate DateTime [default: `now()`, not null]
  endDate DateTime [not null]
  exposeInScheduleTab Boolean [not null, default: true]
  hideResults Boolean [not null, default: false]
  resultVisibleDate DateTime
  prePromoText String
  prePromoImg String
  postPromoText String
  postPromoImg String
  needToken Boolean [not null, default: true]
  needTokenAddress String
  minimumPoints Int
  minimumSGP Int
  minimumSGT Int
  requiredQuests String[] [not null]
  allowMultipleVote Boolean [not null, default: false]
  voteLimit Int
  bettingMode Boolean [not null, default: false]
  bettingAssetId String
  minimumBet Int [not null, default: 1000]
  maximumBet Int [not null, default: 10000]
  participationRewardAssetId String
  participationRewardAmount Int
  viewCount Int [not null, default: 0]
  uniqueVoters Int [not null, default: 0]
  totalVotes Int [not null, default: 0]
  totalBetsAmount Int [not null, default: 0]
  customResults Int[] [not null]
  verificationHash String
  verifiedAt DateTime
  verifiedBy String
  tags String[] [not null]
  metadata Json
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  artistId String
  artist Artist
  bettingAsset Asset
  participationRewardAsset Asset
  pollLogs PollLog [not null]
  rewardLogs RewardsLog [not null]
}

Table PollLog {
  id String [pk]
  playerId String [not null]
  pollId String [not null]
  optionId String [not null]
  option Json [not null]
  amount Int [not null, default: 1]
  betAmount Int [not null, default: 0]
  ipAddress String
  userAgent String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  rewardAssetId String
  rewardAmount Int
  record Json
  player Player [not null]
  poll Poll [not null]
  rewardAsset Asset
  rewardLogs RewardsLog [not null]

  indexes {
    (playerId, pollId, optionId) [unique]
  }
}

Table RewardsLog {
  id String [pk]
  playerId String [not null]
  assetId String
  balanceBefore Int
  balanceAfter Int
  questId String
  questLogId String
  pollId String
  pollLogId String
  amount Int [not null]
  reason String
  createdAt DateTime [default: `now()`, not null]
  asset Asset
  player Player [not null]
  poll Poll
  pollLog PollLog
  quest Quest
  questLog QuestLog
}

Table Events {
  id String [pk]
  category EventCategory [not null, default: 'other']
  title String [not null]
  description String
  content Json
  url String
  status EventStatus [not null, default: 'upcoming']
  bannerImg String
  bannerImg2 String
  galleryImgs String[] [not null]
  detailImg Json
  saleStartDate DateTime
  saleEndDate DateTime
  price Int
  capacity Int
  ageLimit Int
  organizer String
  organizerImg String
  organizerUrl String
  contact String
  startDate DateTime [not null]
  endDate DateTime [not null]
  location String
  locationAddress String
  locationImg String
  locationUrl String
  locationLat Float
  locationLng Float
  artist String
  artistImg String
  artistUrl String
  tags String[] [not null]
  hashtags String[] [not null]
  promotionText String
  promotionImg String
  isFeatured Boolean [not null, default: false]
  viewCount Int [not null, default: 0]
  bookmarkCount Int [not null, default: 0]
  isActive Boolean [not null, default: true]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Table StoredFiles {
  id String [pk]
  name String
  url String [unique, not null]
  type String
  sourceUrl String
  alt String
  width Int
  height Int
  mimeType String
  sizeBytes Int
  metadata Json
  order Int [default: 0]
  purpose String
  bucket String [not null]
  focusX Float [not null, default: 0.5]
  focusY Float [not null, default: 0.5]
  expiresAt DateTime
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]

  indexes {
    (sourceUrl, type) [unique]
  }
}

Table LoginAttemptLog {
  id String [pk]
  userId String
  email String
  provider String
  success Boolean [not null]
  error String
  ipAddress String
  userAgent String
  timestamp DateTime [default: `now()`, not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  user User
}

Table Payment {
  id String [pk]
  userId String
  productTable String [not null]
  productId String [not null]
  productName String [not null]
  productDefaultCurrency String [not null]
  amount Int [not null]
  quantity Int [not null]
  currency String [not null]
  payMethod String [not null]
  easyPayProvider String
  cardProvider String
  cardInstallmentMonths Int
  cardInterestFree Boolean
  cardApproveNumber String
  cardNumber String
  status PaymentStatus [not null, default: 'PENDING']
  statusReason String
  paidAt DateTime
  cancelledAt DateTime
  failedAt DateTime
  pgResponse Json
  metadata Json
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  channelKey String [not null]
  storeId String [not null]
  promotionCode String
  isPromotionApplied Boolean [not null, default: false]
  convertedPrice Int
  exchangeRate Float
  exchangeRateProvider String
  exchangeRateTimestamp DateTime
  originalProductPrice Int
  refundedAt DateTime
  cancelAmount Int
  redirectUrl String
  code String
  message String
  paymentId String
  pgCode String
  pgMessage String
  transactionType String
  txId String
  postProcessResult Json
  postProcessResultAt DateTime
  receiverWalletAddress String
  needWallet Boolean [not null, default: false]
  completedAt DateTime
  promotion PaymentPromotion
  receiverWallet Wallet
  user User
  virtualAccount VirtualAccount
  webhookEvents WebhookEvent [not null]
}

Table PaymentPromotion {
  id String [pk]
  code String [unique, not null]
  startDate DateTime [not null]
  endDate DateTime [not null]
  discountType PaymentPromotionDiscountType [not null, default: 'percentage']
  discountValue Int [not null]
  isActive Boolean [not null, default: true]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  payments Payment [not null]
}

Table WebhookEvent {
  id String [pk]
  paymentId String
  payload Json
  createdAt DateTime [default: `now()`, not null]
  description String
  payment Payment
}

Table VirtualAccount {
  id String [pk]
  paymentId String [unique, not null]
  bankCode String [not null]
  accountNumber String [not null]
  holderName String [not null]
  expiresAt DateTime [not null]
  depositedAt DateTime
  depositorName String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  payment Payment [not null]
}

Table ExchangeRate {
  id String [pk]
  fromCurrency String [not null]
  toCurrency String [not null]
  rate Float [not null]
  provider String [not null]
  createdAt DateTime [default: `now()`, not null]
}

Table BlockchainNetwork {
  id String [pk]
  name String [unique, not null]
  chainId Int [unique, not null]
  rpcUrl String [not null]
  explorerUrl String [not null]
  symbol String [not null]
  isTestnet Boolean [not null, default: true]
  isActive Boolean [not null, default: true]
  isStoryNetwork Boolean [not null, default: false]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  multicallAddress String
  defaultNetwork Boolean [not null, default: false]
  assets Asset [not null]
  assetsContracts AssetsContract [not null]
  collectionContracts CollectionContract [not null]
  factoryContracts FactoryContract [not null]
  nfts NFT [not null]
  story_ipAssets Story_ipAsset [not null]
  story_nfts Story_nft [not null]
  story_spg Story_spg [not null]
  story_spg_contracts Story_spgContract [not null]
  tbaContracts TBAContract [not null]
}

Table AssetsContract {
  id String [pk]
  address String [unique, not null]
  version String [not null]
  description String
  abi Json
  bytecode String
  networkId String [not null]
  creatorAddress String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  assets Asset [not null]
  network BlockchainNetwork [not null]
}

Table Asset {
  id String [pk]
  name String [not null]
  symbol String [not null]
  description String
  iconUrl String
  imageUrl String
  metadata Json
  assetType AssetType [not null]
  contractAddress String
  isActive Boolean [not null, default: true]
  isDefault Boolean [not null, default: false]
  selectors String[] [not null]
  abis Json
  creatorAddress String
  assetId String
  assetsContractAddress String
  networkId String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  assetsContract AssetsContract
  network BlockchainNetwork
  playerAssets PlayerAsset [not null]
  pollBettingAssets Poll [not null]
  pollParticipationRewardAssets Poll [not null]
  pollLogRewardAssets PollLog [not null]
  questRewardAssets Quest [not null]
  questLogRewardAssets QuestLog [not null]
  rewardsLogs RewardsLog [not null]
  stakeRewards StakeReward [not null]
  stakeRewardLogs StakeRewardLog [not null]
}

Table AssetTransaction {
  id String [pk]
  success Boolean [not null]
  assetId String [not null]
  description String
  metadata Json
  amount Int
  receiverAddress String
  transactionHash String [unique, not null]
  createdAt DateTime [default: `now()`, not null]
}

Table FactoryContract {
  id String [pk]
  address String [not null]
  networkId String [not null]
  deployedAt DateTime [default: `now()`, not null]
  deployedBy String
  transactionHash String
  isActive Boolean [not null, default: true]
  collections String[] [not null]
  abi Json
  bytecode String
  collectionContracts CollectionContract [not null]
  network BlockchainNetwork [not null]

  indexes {
    (address, networkId) [unique]
  }
}

Table EscrowWallet {
  id String [pk]
  address String [unique, not null]
  privateKey String [not null]
  keyHash String [not null]
  networkIds String[] [not null]
  isActive Boolean [not null, default: true]
  balance Json
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  nonce String [not null]
}

Table ipfs {
  id String [pk]
  cid String [unique, not null]
  url String [unique, not null]
  type String [not null, default: 'default']
  previewUrl String
  previewWidth Int
  previewHeight Int
  previewMimeType String
  previewSizeBytes Int
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Table Metadata {
  id String [pk]
  metadata Json [not null]
  url String [not null, default: 'ipfs://']
  collectionAddress String [unique]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  type MetadataType [not null, default: 'collection']
  tokenId Int
  collectionKey String [not null]
  collectionContract CollectionContract

  indexes {
    (collectionAddress, tokenId) [unique]
  }
}

Table CollectionContract {
  id String [pk]
  address String [unique, not null]
  name String [not null]
  symbol String [not null]
  maxSupply Int [not null]
  mintPrice String [not null]
  baseURI String [not null]
  contractURI String [not null]
  factoryId String [not null]
  networkId String [not null]
  createdBy String [not null, default: 'admin']
  creatorAddress String [not null, default: '0x58E1F072A8f41e1d476F06d73a6cB7b866e6f63B']
  txHash String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  price Int [not null, default: 0]
  circulation Int [not null, default: 1000]
  mintedCount Int [not null, default: 0]
  artistId String
  key String [unique, not null]
  isListed Boolean [not null, default: false]
  abi Json
  bytecode String
  isPaused Boolean [not null, default: false]
  pauseAt DateTime
  unpauseAt DateTime
  preSaleStart DateTime
  preSaleEnd DateTime
  saleStart DateTime
  saleEnd DateTime
  glowStart DateTime
  glowEnd DateTime
  pageImages String[] [not null]
  artist Artist
  factory FactoryContract [not null]
  network BlockchainNetwork [not null]
  participants CollectionParticipant [not null]
  metadata Metadata
  nfts NFT [not null]
  events NFTEvent [not null]
  stakeRewards StakeReward [not null]
}

Table NFT {
  id String [pk]
  tokenId Int [not null]
  collectionId String [not null]
  ownerAddress String [not null]
  metadataUri String
  mintedAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  transactionHash String [not null]
  networkId String [not null]
  name String
  description String
  imageUrl String
  attributes Json
  isListed Boolean [not null, default: false]
  listingPrice String
  lastTransferredAt DateTime
  transferCount Int [not null, default: 0]
  isBurned Boolean [not null, default: false]
  rarity Float
  tags String[] [not null]
  category String
  creatorInfo String
  externalUrl String
  mintPrice String
  mintedBy String
  royaltyInfo Json
  currentOwnerAddress String
  isLocked Boolean [not null, default: false]
  lockedAt DateTime
  unlockAt DateTime
  unlockScheduledAt DateTime
  lockTransactionHash String
  isStaked Boolean [not null, default: false]
  stakedAt DateTime
  unstakeScheduledAt DateTime
  unstakedAt DateTime
  collection CollectionContract [not null]
  network BlockchainNetwork [not null]
  events NFTEvent [not null]
  stakeRewardLogs StakeRewardLog [not null]

  indexes {
    (collectionId, tokenId) [unique]
  }
}

Table CollectionParticipant {
  id String [pk]
  type CollectionParticipantType [not null]
  userId String [not null]
  collectionAddress String [not null]
  createdAt DateTime [default: `now()`, not null]
  collection CollectionContract [not null]
  user User [not null]

  indexes {
    (userId, collectionAddress, type) [unique]
  }
}

Table StakeReward {
  id String [pk]
  assetId String [not null]
  amount Int [not null]
  stakeDuration BigInt [not null]
  collectionAddress String [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  asset Asset [not null]
  collection CollectionContract [not null]
  stakeRewardLogs StakeRewardLog [not null]
}

Table StakeRewardLog {
  id String [pk]
  stakeRewardId String [not null]
  nftId String [not null]
  assetId String [not null]
  amount Int [not null]
  isDistributed Boolean [not null, default: false]
  distributedAt DateTime
  isClaimed Boolean [not null, default: false]
  claimedAt DateTime
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  asset Asset [not null]
  nft NFT [not null]
  stakeReward StakeReward [not null]
}

Table NFTEvent {
  id String [pk]
  nftId String [not null]
  collectionId String [not null]
  eventType String [not null]
  fromAddress String
  toAddress String
  price String
  transactionHash String [not null]
  timestamp DateTime [default: `now()`, not null]
  blockNumber Int
  collection CollectionContract [not null]
  nft NFT [not null]
}

Table Artist {
  id String [pk]
  name String [not null]
  description String
  logoUrl String
  imageUrl String
  externalUrl String
  reportUrl String
  company String
  sns String[] [not null]
  gallery String[] [not null]
  videos String[] [not null]
  music String[] [not null]
  events String[] [not null]
  additionalInfo Json
  backgroundColors String[] [not null]
  foregroundColors String[] [not null]
  code String [unique]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  feeds ArtistFeed [not null]
  members ArtistMember [not null]
  messages ArtistMessage [not null]
  collectionContracts CollectionContract [not null]
  polls Poll [not null]
  quests Quest [not null]
  story_spg Story_spg [not null]
}

Table ArtistMember {
  id String [pk]
  artistId String [not null]
  name String [not null]
  role String [not null]
  imageUrl String
  externalUrl String
  description String
  realName String
  birthDate DateTime
  birthPlace String
  nationality String
  height Int
  weight Int
  bloodType String
  constellation String
  sns String[] [not null]
  gallery String[] [not null]
  videos String[] [not null]
  music String[] [not null]
  additionalInfo Json
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  artist Artist [not null]
}

Table ArtistMessage {
  id String [pk]
  artistId String [not null]
  bannerUrl String
  externalUrl String
  isActive Boolean [not null, default: true]
  startDate DateTime
  endDate DateTime
  message String [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  artist Artist [not null]
}

Table ArtistFeed {
  id String [pk]
  artistId String [not null]
  imageUrls String[] [not null]
  videoUrls String[] [not null]
  text String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  artist Artist [not null]
  reactions ArtistFeedReaction [not null]
}

Table ArtistFeedReaction {
  id String [pk]
  artistFeedId String [not null]
  playerId String [not null]
  reaction String [not null]
  comment String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  artistFeed ArtistFeed [not null]
  player Player [not null]

  indexes {
    (artistFeedId, playerId, reaction) [unique]
  }
}

Table Story_spgContract {
  id String [pk]
  address String [unique, not null]
  abi Json
  bytecode String
  txHash String
  networkId String [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  story_spg Story_spg [not null]
  network BlockchainNetwork [not null]
}

Table TBAContract {
  id String [pk]
  address String [unique, not null]
  type TBAContractType [not null]
  name String
  version String
  abi Json
  bytecode String
  txHash String
  deployedBy String
  networkId String [not null]
  isActive Boolean [not null, default: true]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  network BlockchainNetwork [not null]

  indexes {
    (networkId, type, address) [unique]
  }
}

Table Story_spg {
  id String [pk]
  address String [unique, not null]
  baseURI String [not null]
  contractURI String [not null]
  name String [unique, not null]
  symbol String [unique, not null]
  imageUrl String
  metadata Json
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  contractAddress String
  networkId String [not null]
  ownerAddress String [not null]
  artistId String
  tbaRegistryAddress String
  tbaImplementationAddress String
  isListed Boolean [not null, default: false]
  reportUrl String
  sharePercentage Float [not null, default: 0]
  preOrderStart DateTime
  preOrderEnd DateTime
  saleStart DateTime
  saleEnd DateTime
  glowStart DateTime
  glowEnd DateTime
  price Int [not null, default: 0]
  circulation Int [not null, default: 1000]
  pageImages String[] [not null]
  backgroundColor String
  foregroundColor String
  story_nfts Story_nft [not null]
  artist Artist
  contract Story_spgContract
  network BlockchainNetwork [not null]
}

Table Story_nft {
  id String [pk]
  tokenId String [not null]
  ownerAddress String [not null]
  networkId String [not null]
  tokenURI String [not null]
  tokenURICid String [not null]
  mintTxHash String
  contractAddress String [not null]
  ipId String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  spgCollection Story_spg [not null]
  ipAsset Story_ipAsset
  network BlockchainNetwork [not null]

  indexes {
    (contractAddress, tokenId) [unique]
  }
}

Table Story_ipAsset {
  id String [pk]
  ipId String [unique, not null]
  chainId String [not null]
  tokenContract String [not null]
  tokenId String [not null]
  ipMetadataURI String
  ipMetadataHash String
  nftMetadataURI String
  nftMetadataHash String
  registrationTxHash String
  licenseTermsId String
  licenseTermsURI String
  networkId String [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  network BlockchainNetwork [not null]
  nfts Story_nft [not null]

  indexes {
    (chainId, tokenContract, tokenId) [unique]
  }
}

Table TweetAuthor {
  id String [pk]
  authorId String [unique, not null]
  name String
  username String
  profileImageUrl String
  validated Boolean [not null, default: false]
  validatedAt DateTime
  registered Boolean [not null, default: false]
  registeredAt DateTime
  tweets Tweet [not null]
  player Player
  metrics TweetAuthorMetrics [not null]
  isBlacklisted Boolean [not null, default: false]
  blacklistedAt DateTime
  blacklistData TweetAuthorBlacklist
}

Table TweetAuthorMetrics {
  id String [pk]
  tweetAuthorId String [not null]
  tweetAuthor TweetAuthor [not null]
  followersCount Int [not null]
  followingCount Int [not null]
  tweetCount Int [not null]
  listedCount Int [not null]
  verified Boolean [not null, default: false]
  recordedAt DateTime [default: `now()`, not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Table TweetAuthorBlacklist {
  id String [pk]
  authorId String [unique, not null]
  author TweetAuthor [not null]
  reason String
  tweetCount Int [not null, default: 0]
  periodStart DateTime
  periodEnd DateTime
  isActive Boolean [not null, default: true]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Table Tweet {
  id String [pk]
  tweetId String [unique, not null]
  text String [not null]
  authorName String
  authorUsername String
  authorProfileImageUrl String
  authorId String [not null]
  isDeleted Boolean [not null, default: false]
  deletedAt DateTime
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  author TweetAuthor [not null]
  media TweetMedia [not null]
  metricsHistory TweetMetrics [not null]
}

Table TweetMetrics {
  id String [pk]
  tweetId String [not null]
  replyCount Int [not null]
  retweetCount Int [not null]
  likeCount Int [not null]
  quoteCount Int [not null]
  recordedAt DateTime [default: `now()`, not null]
  tweet Tweet [not null]
}

Table TweetMedia {
  id String [pk]
  mediaKey String [unique, not null]
  tweetId String [not null]
  type String [not null]
  url String
  previewImageUrl String
  width Int
  height Int
  durationMs Int
  altText String
  createdAt DateTime [default: `now()`, not null]
  tweet Tweet [not null]
}

Table TweetSyncData {
  id Int [pk, increment]
  lastTweetId String
  lastSyncAt DateTime [default: `now()`, not null]
  syncStatus String [not null, default: 'success']
  errorMessage String
  totalTweetsFound Int [not null, default: 0]
  newTweetsAdded Int [not null, default: 0]
  apiRequestsUsed Int [not null, default: 0]
  rateLimitRemaining Int
  executionTimeMs Int
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  tweetResponses TweetResponse [not null]
}

Table TweetResponse {
  id String [pk]
  tweetSyncDataId Int [not null]
  rawResponse Json [not null]
  requestParams Json [not null]
  responseCode Int [not null]
  requestTimestamp DateTime [default: `now()`, not null]
  processingTimeMs Int
  tweetSyncData TweetSyncData [not null]
}

Table XAuthSession {
  id String [pk]
  state String [unique, not null]
  codeVerifier String [not null]
  playerId String [not null]
  expiresAt DateTime [not null]
  createdAt DateTime [default: `now()`, not null]
}

Table StakeReward {
  stakerewardsId String [ref: > StakeReward.id]
  stakerewardsId String [ref: > StakeReward.id]
}

Table StakeRewardLog {
  stakerewardlogsId String [ref: > StakeRewardLog.id]
  stakerewardlogsId String [ref: > StakeRewardLog.id]
}

Enum PlayerAssetStatus {
  ACTIVE
  INACTIVE
  DELETED
  FROZEN
}

Enum QuestType {
  URL
  REFERRAL
}

Enum PollStatus {
  UPCOMING
  ACTIVE
  ENDED
  CANCELLED
  CALCULATING_RESULTS
}

Enum PollCategory {
  PUBLIC
  PRIVATE
}

Enum AssetType {
  ONCHAIN
  OFFCHAIN
}

Enum CollectionParticipantType {
  PREREGISTRATION
  PRESALE
  PRIVATESALE
  PUBLICSALE
  GLOW
}

Enum TBAContractType {
  REGISTRY
  IMPLEMENTATION
}

Enum PaymentStatus {
  PENDING
  AWAITING_DEPOSIT
  PAID
  CANCELLED
  FAILED
  EXPIRED
  PARTIALLY_CANCELLED
  REFUNDED
  COMPLETED
}

Enum PaymentPromotionDiscountType {
  percentage
  amount
}

Enum RewardCurrency {
  points
  SGP
  SGT
}

Enum EventCategory {
  concert
  fanmeeting
  fancamp
  festival
  exhibition
  other
}

Enum EventStatus {
  upcoming
  ongoing
  completed
  cancelled
}

Enum WalletStatus {
  ACTIVE
  INACTIVE
  LOCKED
}

Enum MetadataType {
  collection
  nft
}

Ref: Account.userId > User.id [delete: Cascade]

Ref: DiscordCode.userId > User.id [delete: Cascade]

Ref: Session.userId > User.id [delete: Cascade]

Ref: Wallet.userId > User.id [delete: Cascade]

Ref: Player.referredBy - Player.id

Ref: Player.tweetAuthorId - TweetAuthor.authorId

Ref: Player.userId - User.id [delete: Cascade]

Ref: ReferralLog.referredPlayerId > Player.id [delete: Cascade]

Ref: ReferralLog.referrerPlayerId > Player.id [delete: Cascade]

Ref: PlayerAsset.assetId > Asset.id [delete: Cascade]

Ref: PlayerAsset.playerId > Player.id [delete: Cascade]

Ref: Quest.artistId > Artist.id

Ref: Quest.rewardAssetId > Asset.id

Ref: QuestLog.playerId > Player.id [delete: Cascade]

Ref: QuestLog.questId > Quest.id

Ref: QuestLog.rewardAssetId > Asset.id

Ref: Poll.artistId > Artist.id

Ref: Poll.bettingAssetId > Asset.id

Ref: Poll.participationRewardAssetId > Asset.id

Ref: PollLog.playerId > Player.id [delete: Cascade]

Ref: PollLog.pollId > Poll.id

Ref: PollLog.rewardAssetId > Asset.id

Ref: RewardsLog.assetId > Asset.id

Ref: RewardsLog.playerId > Player.id [delete: Cascade]

Ref: RewardsLog.pollId > Poll.id

Ref: RewardsLog.pollLogId > PollLog.id

Ref: RewardsLog.questId > Quest.id

Ref: RewardsLog.questLogId > QuestLog.id

Ref: LoginAttemptLog.userId > User.id [delete: Cascade]

Ref: Payment.promotionCode > PaymentPromotion.code

Ref: Payment.receiverWalletAddress > Wallet.address

Ref: Payment.userId > User.id

Ref: WebhookEvent.paymentId > Payment.id [delete: Cascade]

Ref: VirtualAccount.paymentId - Payment.id [delete: Cascade]

Ref: AssetsContract.networkId > BlockchainNetwork.id

Ref: Asset.assetsContractAddress > AssetsContract.address

Ref: Asset.networkId > BlockchainNetwork.id

Ref: FactoryContract.networkId > BlockchainNetwork.id

Ref: Metadata.collectionAddress - CollectionContract.address

Ref: CollectionContract.artistId > Artist.id

Ref: CollectionContract.factoryId > FactoryContract.id

Ref: CollectionContract.networkId > BlockchainNetwork.id

Ref: NFT.collectionId > CollectionContract.id

Ref: NFT.networkId > BlockchainNetwork.id

Ref: CollectionParticipant.collectionAddress > CollectionContract.address

Ref: CollectionParticipant.userId > User.id

Ref: StakeReward.assetId > Asset.id

Ref: StakeReward.collectionAddress > CollectionContract.address

Ref: StakeRewardLog.assetId > Asset.id

Ref: StakeRewardLog.nftId > NFT.id

Ref: StakeRewardLog.stakeRewardId > StakeReward.id

Ref: NFTEvent.collectionId > CollectionContract.id

Ref: NFTEvent.nftId > NFT.id

Ref: ArtistMember.artistId > Artist.id

Ref: ArtistMessage.artistId > Artist.id

Ref: ArtistFeed.artistId > Artist.id

Ref: ArtistFeedReaction.artistFeedId > ArtistFeed.id

Ref: ArtistFeedReaction.playerId > Player.id

Ref: Story_spgContract.networkId > BlockchainNetwork.id

Ref: TBAContract.networkId > BlockchainNetwork.id

Ref: Story_spg.artistId > Artist.id

Ref: Story_spg.contractAddress > Story_spgContract.address

Ref: Story_spg.networkId > BlockchainNetwork.id

Ref: Story_nft.contractAddress > Story_spg.address

Ref: Story_nft.ipId > Story_ipAsset.ipId

Ref: Story_nft.networkId > BlockchainNetwork.id

Ref: Story_ipAsset.networkId > BlockchainNetwork.id

Ref: TweetAuthorMetrics.tweetAuthorId > TweetAuthor.authorId

Ref: TweetAuthorBlacklist.authorId - TweetAuthor.authorId

Ref: Tweet.authorId > TweetAuthor.authorId

Ref: TweetMetrics.tweetId > Tweet.tweetId

Ref: TweetMedia.tweetId > Tweet.tweetId

Ref: TweetResponse.tweetSyncDataId > TweetSyncData.id [delete: Cascade]