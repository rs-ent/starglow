/// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  lastLoginAt   DateTime?

  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  player        Player?

  @@index([lastLoginAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  id         String    @id @default(cuid())
  userId     String
  address    String    @unique
  privateKey String?  
  network    String
  createdAt  DateTime  @default(now())
  default    Boolean   @default(false)
  primary    Int?      @default(0)

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, address])
}

model Player {
  id                 String        @id @default(cuid())
  userId             String        @unique
  telegramId         String?       @unique
  name               String?
  points             Int           @default(0)
  SGP                Int           @default(0)
  SGT                Int           @default(0)
  recommendedCount   Int           @default(0)
  recommenderId      String?
  recommenderName    String?
  recommenderMethod  String?
  createdAt          DateTime      @default(now())
  lastConnectedAt    DateTime      @updatedAt

  questLogs          QuestLog[]
  rewardLogs         RewardsLog[]
  pollLogs           PollLog[]

  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, telegramId, id])
}

enum RewardCurrency {
  points
  SGP
  SGT
}

model Quest {
  id              String              @id @default(cuid())
  title           String
  description     String?
  url             String?
  icon            String?
  rewards         Int                 @default(800)
  rewardCurrency  RewardCurrency      @default(points)
  startDate       DateTime?    
  endDate         DateTime?
  permanent       Boolean             @default(false)
  visible         Boolean             @default(true)
  primary         Int?                @default(0)
  effects         String?
  type            String?

  questLogs       QuestLog[]
  rewardLogs      RewardsLog[]

  @@index([startDate])
  @@index([permanent, visible])
  @@index([primary])
}

model QuestLog {
  id             String    @id @default(cuid())
  playerId       String
  questId        String
  completed      Boolean   @default(false)
  completedAt    DateTime  @default(now())
  rewards        Int       @default(0)
  rewardCurrency RewardCurrency @default(points)
  createdAt      DateTime  @default(now())

  rewardLogs     RewardsLog[]

  player         Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  quest          Quest     @relation(fields: [questId], references: [id])

  @@index([playerId, completed])
}

model Poll {
  id                      String    @id @default(cuid())
  title                   String
  titleShorten            String?
  options                 String[]  @default([])
  optionsShorten          String[]  @default([])
  bannerImg               String?
  startDate               DateTime  @default(now())
  endDate                 DateTime  @default(now())
  exposeInScheduleTab     Boolean   @default(false)
  openPromotionText       String?
  openPromotionImg        String?
  resultPromotionText     String?
  resultPromotionImg      String?
  totalVotes              Int       @default(0)
  totalVotesByOption      Int[]     @default([])
  totalBetsAmount         Int       @default(0)
  totalBetsAmountByOption Int[]     @default([])
  results                 Int[]     @default([])
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  pollLogs                PollLog[]
  rewardLogs             RewardsLog[]

}

model PollLog {
  id             String    @id @default(cuid())
  playerId       String
  pollId         String
  option         String
  betAmount      Int       @default(0)
  createdAt      DateTime  @default(now())

  rewardLogs     RewardsLog[]

  player         Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  poll           Poll      @relation(fields: [pollId], references: [id])

}

model RewardsLog {
  id             String    @id @default(cuid())
  playerId       String
  questId        String?
  questLogId     String?
  pollId         String?
  pollLogId      String?
  amount         Int
  currency       RewardCurrency @default(points)
  reason         String?
  createdAt      DateTime  @default(now())

  player         Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  quest          Quest?    @relation(fields: [questId], references: [id])
  questLog       QuestLog? @relation(fields: [questLogId], references: [id])
  poll           Poll?     @relation(fields: [pollId], references: [id])
  pollLog        PollLog?  @relation(fields: [pollLogId], references: [id])

}

enum EventCategory {
  concert
  fanmeeting
  fancamp
  festival
  exhibition
  other
}

enum EventStatus {
  upcoming
  ongoing
  completed
  cancelled
}

model Events {
  id           String    @id @default(cuid())
  category     EventCategory @default(other)
  title        String
  description  String?
  content      Json?
  url          String?
  status       EventStatus @default(upcoming)
  bannerImg    String?
  bannerImg2   String?
  galleryImgs  String[] @default([])
  detailImg    Json?
  saleStartDate DateTime?
  saleEndDate   DateTime?
  price        Int?
  capacity     Int?
  ageLimit     Int?
  organizer    String?
  organizerImg String?
  organizerUrl String?
  contact      String?
  startDate    DateTime
  endDate      DateTime
  location     String?
  locationAddress String?
  locationImg  String?
  locationUrl  String?
  locationLat  Float?
  locationLng  Float?
  artist       String?
  artistImg    String?
  artistUrl    String?
  tags         String[] @default([])
  hashtags     String[] @default([])
  promotionText String?
  promotionImg  String?
  isFeatured   Boolean   @default(false)
  viewCount    Int       @default(0)
  bookmarkCount Int       @default(0)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([category])
  @@index([status])
  @@index([saleStartDate])
  @@index([saleEndDate])
  @@index([price])
  @@index([category, status])
  @@index([isFeatured])
  @@index([isActive])
  @@index([startDate])
  @@index([endDate])
  @@index([location])
  @@index([title])
}

model StoredFiles {
  id           String    @id @default(cuid())
  name         String?   @db.VarChar(255)
  url          String    @unique @db.VarChar(2048)
  type         String?   @db.VarChar(50)
  sourceUrl    String?   @db.VarChar(2048)
  alt          String?   @db.VarChar(255)
  width        Int?                      
  height       Int?                      
  mimeType     String?   @db.VarChar(50)
  sizeBytes    Int?                     
  metadata     Json?                   
  order        Int?      @default(0)
  purpose      String?   @db.VarChar(50)
  bucket       String   @db.VarChar(50)
  expiresAt    DateTime?                
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([url, sourceUrl])
  @@unique([sourceUrl, type])
}