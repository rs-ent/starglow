generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  role                   String                  @default("user")
  active                 Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  lastLoginAt            DateTime?
  provider               String?
  telegramId             String?                 @unique
  password               String?
  phone                  String?
  discordId              String?                 @unique
  accounts               Account[]
  collectionParticipants CollectionParticipant[]
  discordCode            DiscordCode[]
  loginAttempts          LoginAttemptLog[]       @relation("UserLoginAttempts")
  payments               Payment[]
  player                 Player?
  sessions               Session[]
  wallets                Wallet[]

  @@index([email, active])
  @@index([role, active])
  @@index([lastLoginAt])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId, provider])
}

model DiscordAccount {
  id        String   @id @default(cuid())
  discordId String   @unique
  userIds   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userIds])
  @@index([createdAt])
  @@index([updatedAt])
}

model DiscordCode {
  id        String   @id @default(cuid())
  code      String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique(map: "Session_sessionToken_unique")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expires])
}

model Wallet {
  id             String       @id @default(cuid())
  userId         String
  address        String       @unique
  privateKey     String?
  network        String
  createdAt      DateTime     @default(now())
  default        Boolean      @default(false)
  primary        Int?         @default(0)
  lastAccessedAt DateTime     @updatedAt
  nickname       String?
  status         WalletStatus @default(ACTIVE)
  keyHash        String?
  nonce          String?
  provider       String       @default("starglow")
  payments       Payment[]
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, network, default])
  @@index([address, network])
  @@index([status])
  @@index([createdAt])
}

model Player {
  id                       String                  @id @default(cuid())
  userId                   String?                 @unique
  telegramId               String?                 @unique
  name                     String?
  createdAt                DateTime                @default(now())
  lastConnectedAt          DateTime                @updatedAt
  referralCount            Int                     @default(0)
  referredAt               DateTime                @default(now())
  referredBy               String?
  referredMethod           String?
  referralCode             String                  @unique
  nickname                 String?
  email                    String?
  image                    String?
  tweetAuthorId            String?                 @unique
  tweetVerified            Boolean                 @default(false)
  artistId                 String?
  isArtist                 Boolean                 @default(false)
  boardReputationScore     Int                     @default(0)
  boardTrustLevel          Int                     @default(0)
  tester                   Boolean                 @default(false)
  browser                  String?
  city                     String?
  country                  String?
  device                   String?
  ipAddress                String?
  locale                   String?
  os                       String?
  state                    String?
  timezone                 String?
  artistFeedReactions      ArtistFeedReaction[]
  assetInstances           AssetInstance[]
  boardComments            BoardComment[]          @relation("BoardCommentAuthor")
  committedBoardModeration BoardModerationReport[] @relation("BoardModerationReportOffender")
  reportedBoardModeration  BoardModerationReport[] @relation("BoardModerationReportReporter")
  boardPosts               BoardPost[]             @relation("BoardPostAuthor")
  grantedBoardRewards      BoardPostReward[]       @relation("BoardPostRewardGranter")
  boardPostRewards         BoardPostReward[]       @relation("BoardPostRewardPlayer")
  boardReactions           BoardReaction[]         @relation("BoardReactionPlayer")
  artist                   Artist?                 @relation("PlayerArtist", fields: [artistId], references: [id])
  referrer                 Player?                 @relation("Referrer", fields: [referredBy], references: [id])
  referredPlayers          Player[]                @relation("Referrer")
  tweetAuthor              TweetAuthor?            @relation("PlayerToTweetAuthor", fields: [tweetAuthorId], references: [authorId])
  user                     User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  playerAssets             PlayerAsset[]
  pollLogs                 PollLog[]
  questLogs                QuestLog[]
  raffleParticipants       RaffleParticipant[]
  raffleWinners            RaffleWinner[]
  referredPlayerLogs       ReferralLog[]           @relation("ReferredPlayer")
  referrerPlayerLogs       ReferralLog[]           @relation("ReferrerPlayer")
  rewardLogs               RewardsLog[]
  notificationSettings     NotificationSettings?
  userNotifications        UserNotification[]

  @@unique([userId, telegramId])
  @@index([userId, telegramId])
  @@index([referredBy])
  @@index([createdAt])
  @@index([lastConnectedAt])
  @@index([isArtist])
  @@index([artistId])
}

model PlayerOldData {
  id                 String   @id @default(cuid())
  telegramId         String   @unique
  name               String?
  points             Int      @default(0)
  referrerTelegramId String?
  createdAt          DateTime @default(now())
}

model ReferralLog {
  id               String   @id @default(cuid())
  referredPlayerId String
  referrerPlayerId String
  createdAt        DateTime @default(now())
  method           String?
  referredPlayer   Player   @relation("ReferredPlayer", fields: [referredPlayerId], references: [id], onDelete: Cascade)
  referrerPlayer   Player   @relation("ReferrerPlayer", fields: [referrerPlayerId], references: [id], onDelete: Cascade)

  @@unique([referredPlayerId, referrerPlayerId])
  @@index([referrerPlayerId])
}

model PlayerAsset {
  id             String            @id @default(cuid())
  playerId       String
  assetId        String
  balance        Int               @default(0)
  updatedAt      DateTime          @updatedAt
  status         PlayerAssetStatus @default(ACTIVE)
  assetInstances AssetInstance[]
  asset          Asset             @relation(fields: [assetId], references: [id], onDelete: Cascade)
  player         Player            @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, assetId])
  @@index([assetId])
  @@index([status])
}

model Quest {
  id                 String       @id @default(cuid())
  title              String
  description        String?
  url                String?
  icon               String?
  startDate          DateTime?
  endDate            DateTime?
  permanent          Boolean      @default(false)
  effects            String?
  type               String?
  rewardAmount       Int?
  rewardAssetId      String?
  imgUrl             String?
  isActive           Boolean      @default(true)
  order              Int?         @default(0)
  youtubeUrl         String?
  repeatable         Boolean      @default(false)
  repeatableCount    Int?
  repeatableInterval Int?
  artistId           String?
  needToken          Boolean      @default(false)
  needTokenAddress   String?
  isReferral         Boolean      @default(false)
  referralCount      Int?
  questType          QuestType    @default(URL)
  multiClaimInterval Int?
  multiClaimLimit    Int?
  multiClaimable     Boolean      @default(false)
  urls               String[]
  test               Boolean      @default(false)
  artist             Artist?      @relation("ArtistQuests", fields: [artistId], references: [id])
  rewardAsset        Asset?       @relation("QuestRewardAsset", fields: [rewardAssetId], references: [id])
  questLogs          QuestLog[]
  rewardLogs         RewardsLog[]

  @@index([permanent, isActive, startDate])
  @@index([type, isActive])
  @@index([order, isActive])
  @@index([artistId, isActive])
  @@index([questType, isActive])
}

model QuestLog {
  id             String         @id @default(cuid())
  playerId       String
  questId        String
  completed      Boolean        @default(false)
  completedAt    DateTime?
  createdAt      DateTime       @default(now())
  rewardAmount   Int?
  rewardAssetId  String?
  claimedAt      DateTime?
  isClaimed      Boolean        @default(false)
  repeatCount    Int            @default(1)
  completedDates DateTime[]
  deprecated     Boolean        @default(false)
  reclaimable    Boolean        @default(false)
  claimedDates   DateTime[]
  status         QuestLogStatus @default(PENDING)
  player         Player         @relation(fields: [playerId], references: [id], onDelete: Cascade)
  quest          Quest          @relation(fields: [questId], references: [id])
  rewardAsset    Asset?         @relation("QuestLogRewardAsset", fields: [rewardAssetId], references: [id])
  rewardLogs     RewardsLog[]

  @@unique([playerId, questId])
  @@index([playerId, questId, deprecated])
  @@index([questId, playerId])
  @@index([completedAt])
  @@index([status])
}

model Poll {
  id                          String                     @id @default(cuid())
  title                       String
  titleShorten                String?
  startDate                   DateTime                   @default(now())
  endDate                     DateTime
  exposeInScheduleTab         Boolean                    @default(true)
  totalVotes                  Int                        @default(0)
  totalBetsAmount             Int                        @default(0)
  createdAt                   DateTime                   @default(now())
  updatedAt                   DateTime                   @updatedAt
  allowMultipleVote           Boolean                    @default(false)
  bettingMode                 Boolean                    @default(false)
  category                    PollCategory               @default(PUBLIC)
  customResults               Int[]                      @default([])
  description                 String?
  hideResults                 Boolean                    @default(false)
  imgUrl                      String?
  maximumBet                  Int                        @default(10000)
  metadata                    Json?
  minimumBet                  Int                        @default(1000)
  minimumPoints               Int?
  minimumSGP                  Int?
  minimumSGT                  Int?
  needToken                   Boolean                    @default(true)
  needTokenAddress            String?
  optionsOrder                String[]                   @default([])
  postPromoImg                String?
  postPromoText               String?
  prePromoImg                 String?
  prePromoText                String?
  requiredQuests              String[]                   @default([])
  resultVisibleDate           DateTime?
  status                      PollStatus                 @default(UPCOMING)
  tags                        String[]                   @default([])
  uniqueVoters                Int                        @default(0)
  verificationHash            String?
  verifiedAt                  DateTime?
  verifiedBy                  String?
  viewCount                   Int                        @default(0)
  voteLimit                   Int?
  youtubeUrl                  String?
  options                     Json[]
  bettingAssetId              String?
  participationRewardAmount   Int?
  participationRewardAssetId  String?
  artistId                    String?
  isActive                    Boolean                    @default(false)
  answerOptionIds             String[]                   @default([])
  hasAnswer                   Boolean                    @default(false)
  bettingStatus               BettingStatus              @default(OPEN)
  houseCommissionRate         Float                      @default(0.05)
  isSettled                   Boolean                    @default(false)
  optionBetAmounts            Json?
  settledAt                   DateTime?
  settledBy                   String?
  totalCommissionAmount       Int                        @default(0)
  winningOptionId             String?
  answerAnnouncementDate      DateTime?
  hasAnswerAnnouncement       Boolean                    @default(false)
  participationConsumeAmount  Int?
  participationConsumeAssetId String?
  showOnPollPage              Boolean                    @default(true)
  showOnStarPage              Boolean                    @default(true)
  test                        Boolean                    @default(false)
  artist                      Artist?                    @relation("ArtistPolls", fields: [artistId], references: [id])
  bettingAsset                Asset?                     @relation("PollBettingAsset", fields: [bettingAssetId], references: [id])
  participationConsumeAsset   Asset?                     @relation("PollParticipationConsume", fields: [participationConsumeAssetId], references: [id])
  participationRewardAsset    Asset?                     @relation("PollParticipationReward", fields: [participationRewardAssetId], references: [id])
  settlementLogs              PollBettingSettlementLog[]
  pollLogs                    PollLog[]
  rewardLogs                  RewardsLog[]

  @@index([category])
  @@index([artistId])
  @@index([status, startDate])
  @@index([isActive, startDate])
}

model PollLog {
  id                  String       @id @default(cuid())
  playerId            String
  pollId              String
  betAmount           Int          @default(0)
  createdAt           DateTime     @default(now())
  ipAddress           String?
  userAgent           String?
  updatedAt           DateTime     @updatedAt
  record              Json?
  rewardAmount        Int?
  rewardAssetId       String?
  amount              Int          @default(1)
  option              Json
  optionId            String
  isPayoutDistributed Boolean      @default(false)
  payoutAmount        Int          @default(0)
  payoutDistributedAt DateTime?
  payoutMultiplier    Float?
  player              Player       @relation(fields: [playerId], references: [id], onDelete: Cascade)
  poll                Poll         @relation(fields: [pollId], references: [id])
  rewardAsset         Asset?       @relation("PollLogRewardAsset", fields: [rewardAssetId], references: [id])
  rewardLogs          RewardsLog[]

  @@unique([playerId, pollId, optionId])
  @@index([pollId])
  @@index([playerId, pollId])
  @@index([playerId])
}

model RewardsLog {
  id                  String             @id @default(cuid())
  playerId            String
  questId             String?
  questLogId          String?
  pollId              String?
  pollLogId           String?
  amount              Int
  reason              String?
  createdAt           DateTime           @default(now())
  assetId             String?
  balanceAfter        Int?
  balanceBefore       Int?
  tweetAuthorId       String?
  tweetIds            String[]
  raffleId            String?
  raffleParticipantId String?
  asset               Asset?             @relation(fields: [assetId], references: [id])
  player              Player             @relation(fields: [playerId], references: [id], onDelete: Cascade)
  poll                Poll?              @relation(fields: [pollId], references: [id])
  pollLog             PollLog?           @relation(fields: [pollLogId], references: [id])
  quest               Quest?             @relation(fields: [questId], references: [id])
  questLog            QuestLog?          @relation(fields: [questLogId], references: [id])
  raffle              Raffle?            @relation(fields: [raffleId], references: [id])
  raffleParticipant   RaffleParticipant? @relation(fields: [raffleParticipantId], references: [id])
  tweetAuthor         TweetAuthor?       @relation(fields: [tweetAuthorId], references: [id])

  @@index([playerId, pollId])
  @@index([playerId, questId])
  @@index([playerId, assetId])
  @@index([playerId, raffleId])
  @@index([questId, pollId])
  @@index([raffleId])
  @@index([tweetAuthorId, reason])
  @@index([tweetIds])
}

model Events {
  id              String        @id @default(cuid())
  category        EventCategory @default(other)
  title           String
  description     String?
  content         Json?
  url             String?
  status          EventStatus   @default(upcoming)
  bannerImg       String?
  bannerImg2      String?
  galleryImgs     String[]      @default([])
  detailImg       Json?
  saleStartDate   DateTime?
  saleEndDate     DateTime?
  price           Int?
  capacity        Int?
  ageLimit        Int?
  organizer       String?
  organizerImg    String?
  organizerUrl    String?
  contact         String?
  startDate       DateTime
  endDate         DateTime
  location        String?
  locationAddress String?
  locationImg     String?
  locationUrl     String?
  locationLat     Float?
  locationLng     Float?
  artist          String?
  artistImg       String?
  artistUrl       String?
  tags            String[]      @default([])
  hashtags        String[]      @default([])
  promotionText   String?
  promotionImg    String?
  isFeatured      Boolean       @default(false)
  viewCount       Int           @default(0)
  bookmarkCount   Int           @default(0)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([category, status, startDate])
  @@index([location, startDate])
  @@index([isFeatured, isActive, startDate])
  @@index([artistUrl])
  @@index([createdAt])
}

model StoredFiles {
  id        String    @id @default(cuid())
  name      String?
  url       String    @unique
  type      String?
  sourceUrl String?
  alt       String?
  width     Int?
  height    Int?
  mimeType  String?
  sizeBytes Int?
  metadata  Json?
  order     Int?      @default(0)
  purpose   String?
  bucket    String
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  focusX    Float     @default(0.5)
  focusY    Float     @default(0.5)

  @@unique([sourceUrl, type])
  @@index([bucket, purpose])
  @@index([url, type])
}

model LoginAttemptLog {
  id        String   @id @default(cuid())
  userId    String?
  email     String?
  provider  String?
  success   Boolean
  error     String?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation("UserLoginAttempts", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, success, timestamp])
  @@index([email, success, timestamp])
  @@index([provider, success, timestamp])
  @@index([ipAddress, timestamp])
}

model Payment {
  id                     String            @id @default(cuid())
  userId                 String?
  productTable           String
  productId              String
  productName            String
  productDefaultCurrency String
  amount                 Int
  quantity               Int
  currency               String
  payMethod              String
  easyPayProvider        String?
  cardProvider           String?
  cardInstallmentMonths  Int?
  cardInterestFree       Boolean?
  cardApproveNumber      String?
  cardNumber             String?
  status                 PaymentStatus     @default(PENDING)
  statusReason           String?
  paidAt                 DateTime?
  cancelledAt            DateTime?
  failedAt               DateTime?
  pgResponse             Json?
  metadata               Json?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  channelKey             String
  storeId                String
  promotionCode          String?
  isPromotionApplied     Boolean           @default(false)
  convertedPrice         Int?
  exchangeRate           Float?
  exchangeRateProvider   String?
  exchangeRateTimestamp  DateTime?
  originalProductPrice   Int?
  refundedAt             DateTime?
  cancelAmount           Int?
  redirectUrl            String?
  code                   String?
  message                String?
  paymentId              String?
  pgCode                 String?
  pgMessage              String?
  transactionType        String?
  txId                   String?
  postProcessResult      Json?
  postProcessResultAt    DateTime?
  receiverWalletAddress  String?
  needWallet             Boolean           @default(false)
  completedAt            DateTime?
  promotion              PaymentPromotion? @relation(fields: [promotionCode], references: [code])
  receiverWallet         Wallet?           @relation(fields: [receiverWalletAddress], references: [address])
  user                   User?             @relation(fields: [userId], references: [id])
  virtualAccount         VirtualAccount?
  webhookEvents          WebhookEvent[]

  @@index([userId, status])
  @@index([status, createdAt])
  @@index([productTable, productId])
  @@index([channelKey])
  @@index([paymentId])
  @@index([createdAt])
}

model PaymentPromotion {
  id            String                       @id @default(cuid())
  code          String                       @unique
  startDate     DateTime
  endDate       DateTime
  discountType  PaymentPromotionDiscountType @default(percentage)
  discountValue Int
  isActive      Boolean                      @default(true)
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
  payments      Payment[]

  @@index([code])
}

model WebhookEvent {
  id          String   @id @default(cuid())
  paymentId   String?
  payload     Json?
  createdAt   DateTime @default(now())
  description String?
  payment     Payment? @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model VirtualAccount {
  id            String    @id @default(cuid())
  paymentId     String    @unique
  bankCode      String
  accountNumber String
  holderName    String
  expiresAt     DateTime
  depositedAt   DateTime?
  depositorName String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  payment       Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([accountNumber])
}

model ExchangeRate {
  id           String   @id @default(cuid())
  fromCurrency String
  toCurrency   String
  rate         Float
  provider     String
  createdAt    DateTime @default(now())

  @@index([fromCurrency, toCurrency])
}

model BlockchainNetwork {
  id                     String                  @id @default(cuid())
  name                   String                  @unique
  chainId                Int                     @unique
  rpcUrl                 String
  explorerUrl            String
  symbol                 String
  isTestnet              Boolean                 @default(true)
  isActive               Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  multicallAddress       String?
  isStoryNetwork         Boolean                 @default(false)
  defaultNetwork         Boolean                 @default(false)
  assets                 Asset[]
  assetsContracts        AssetsContract[]
  collectionContracts    CollectionContract[]
  factoryContracts       FactoryContract[]
  nfts                   NFT[]
  onchainRaffles         OnchainRaffle[]
  onchainRaffleContracts OnchainRaffleContract[]
  story_ipAssets         Story_ipAsset[]
  story_nfts             Story_nft[]
  story_spg              Story_spg[]
  story_spg_contracts    Story_spgContract[]
  tbaContracts           TBAContract[]

  @@index([isStoryNetwork])
  @@index([isTestnet, isActive, isStoryNetwork])
}

model AssetsContract {
  id             String            @id @default(cuid())
  address        String            @unique
  version        String
  description    String?
  abi            Json?
  bytecode       String?
  networkId      String
  creatorAddress String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  assets         Asset[]
  network        BlockchainNetwork @relation(fields: [networkId], references: [id])

  @@index([networkId])
}

model Asset {
  id                             String             @id @default(cuid())
  name                           String
  symbol                         String
  description                    String?
  iconUrl                        String?
  imageUrl                       String?
  metadata                       Json?
  assetType                      AssetType
  contractAddress                String?
  isActive                       Boolean            @default(true)
  selectors                      String[]           @default([])
  abis                           Json?
  networkId                      String?
  createdAt                      DateTime           @default(now())
  updatedAt                      DateTime           @updatedAt
  creatorAddress                 String?
  assetsContractAddress          String?
  assetId                        String?
  isDefault                      Boolean            @default(false)
  artistId                       String?
  hasInstance                    Boolean            @default(false)
  needTutorial                   Boolean            @default(false)
  artist                         Artist?            @relation("ArtistAssets", fields: [artistId], references: [id])
  assetsContract                 AssetsContract?    @relation(fields: [assetsContractAddress], references: [address])
  network                        BlockchainNetwork? @relation(fields: [networkId], references: [id])
  assetInstances                 AssetInstance[]
  assetTutorial                  AssetTutorial?
  boardPopularPostRewards        Board[]            @relation("BoardPopularPostReward")
  boardPostCreationRewards       Board[]            @relation("BoardPostCreationReward")
  boardQualityContentRewards     Board[]            @relation("BoardQualityContentReward")
  boardPostRewards               BoardPostReward[]  @relation("BoardPostRewardAsset")
  playerAssets                   PlayerAsset[]
  pollBettingAssets              Poll[]             @relation("PollBettingAsset")
  pollParticipationConsumeAssets Poll[]             @relation("PollParticipationConsume")
  pollParticipationRewardAssets  Poll[]             @relation("PollParticipationReward")
  pollLogRewardAssets            PollLog[]          @relation("PollLogRewardAsset")
  questRewardAssets              Quest[]            @relation("QuestRewardAsset")
  questLogRewardAssets           QuestLog[]         @relation("QuestLogRewardAsset")
  raffleEntryFeeAssets           Raffle[]           @relation("RaffleEntryFeeAsset")
  rafflePrizes                   RafflePrize[]      @relation("RafflePrizeAsset")
  rewardsLogs                    RewardsLog[]
  stakeRewards                   StakeReward[]      @relation("StakeReward")
  stakeRewardLogs                StakeRewardLog[]   @relation("StakeRewardLog")

  @@index([isDefault])
  @@index([assetType, isActive])
  @@index([contractAddress])
  @@index([networkId])
  @@index([artistId])
}

model AssetTutorial {
  id        String   @id @default(cuid())
  assetId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  steps     Json
  asset     Asset    @relation(fields: [assetId], references: [id])
}

model AssetInstance {
  id            String              @id @default(cuid())
  serialNumber  String
  status        AssetInstanceStatus @default(PENDING)
  assetId       String
  playerId      String?
  playerAssetId String?
  expiresAt     DateTime?
  validFrom     DateTime?
  validUntil    DateTime?
  usedAt        DateTime?
  usedBy        String?
  usedFor       String?
  usedLocation  String?
  source        String?
  metadata      Json?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  code          String?
  asset         Asset               @relation(fields: [assetId], references: [id])
  playerAsset   PlayerAsset?        @relation(fields: [playerAssetId], references: [id])
  player        Player?             @relation(fields: [playerId], references: [id])

  @@unique([assetId, serialNumber])
  @@unique([assetId, code])
  @@index([playerId])
  @@index([status])
  @@index([serialNumber])
  @@index([assetId, playerId])
}

model AssetTransaction {
  id              String   @id @default(cuid())
  assetId         String
  success         Boolean
  createdAt       DateTime @default(now())
  amount          Int?
  description     String?
  metadata        Json?
  receiverAddress String?
  transactionHash String   @unique

  @@index([assetId, success])
}

model FactoryContract {
  id                  String               @id @default(cuid())
  address             String
  networkId           String
  deployedAt          DateTime             @default(now())
  deployedBy          String?
  transactionHash     String?
  isActive            Boolean              @default(true)
  collections         String[]             @default([])
  abi                 Json?
  bytecode            String?
  collectionContracts CollectionContract[]
  network             BlockchainNetwork    @relation(fields: [networkId], references: [id])

  @@unique([address, networkId])
  @@index([networkId, isActive])
}

model EscrowWallet {
  id                     String                  @id @default(cuid())
  address                String                  @unique
  privateKey             String
  keyHash                String
  networkIds             String[]                @default([])
  isActive               Boolean                 @default(true)
  balance                Json?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  nonce                  String
  onchainRaffles         OnchainRaffle[]
  onchainRaffleContracts OnchainRaffleContract[]

  @@index([isActive])
}

model ipfs {
  id               String   @id @default(cuid())
  cid              String   @unique
  url              String   @unique
  type             String   @default("default")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  previewHeight    Int?
  previewMimeType  String?
  previewSizeBytes Int?
  previewUrl       String?
  previewWidth     Int?

  @@index([type])
  @@index([previewUrl])
}

model Metadata {
  id                 String              @id @default(cuid())
  metadata           Json
  url                String              @default("ipfs://")
  collectionAddress  String?             @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  type               MetadataType        @default(collection)
  tokenId            Int?
  collectionKey      String
  collectionContract CollectionContract? @relation("CollectionContractMetadata", fields: [collectionAddress], references: [address])

  @@unique([collectionAddress, tokenId])
}

model CollectionContract {
  id             String                  @id @default(cuid())
  address        String                  @unique
  name           String
  symbol         String
  maxSupply      Int
  mintPrice      String
  baseURI        String
  contractURI    String
  factoryId      String
  networkId      String
  createdBy      String                  @default("admin")
  txHash         String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  price          Int                     @default(0)
  circulation    Int                     @default(1000)
  mintedCount    Int                     @default(0)
  artistId       String?
  key            String                  @unique
  isListed       Boolean                 @default(false)
  abi            Json?
  bytecode       String?
  isPaused       Boolean                 @default(false)
  pauseAt        DateTime?
  unpauseAt      DateTime?
  creatorAddress String                  @default("0x58E1F072A8f41e1d476F06d73a6cB7b866e6f63B")
  glowEnd        DateTime?
  glowStart      DateTime?
  preSaleEnd     DateTime?
  preSaleStart   DateTime?
  saleEnd        DateTime?
  saleStart      DateTime?
  pageImages     String[]
  artist         Artist?                 @relation(fields: [artistId], references: [id])
  factory        FactoryContract         @relation(fields: [factoryId], references: [id])
  network        BlockchainNetwork       @relation(fields: [networkId], references: [id])
  participants   CollectionParticipant[]
  metadata       Metadata?               @relation("CollectionContractMetadata")
  nfts           NFT[]
  events         NFTEvent[]
  stakeRewards   StakeReward[]           @relation("StakeReward")

  @@index([address, networkId])
  @@index([factoryId])
}

model NFT {
  id                  String             @id @default(cuid())
  tokenId             Int
  collectionId        String
  ownerAddress        String
  metadataUri         String?
  mintedAt            DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  transactionHash     String
  networkId           String
  name                String?
  description         String?
  imageUrl            String?
  attributes          Json?
  isListed            Boolean            @default(false)
  listingPrice        String?
  lastTransferredAt   DateTime?
  transferCount       Int                @default(0)
  isBurned            Boolean            @default(false)
  rarity              Float?
  tags                String[]
  category            String?
  creatorInfo         String?
  externalUrl         String?
  mintPrice           String?
  mintedBy            String?
  royaltyInfo         Json?
  currentOwnerAddress String?
  isLocked            Boolean            @default(false)
  lockedAt            DateTime?
  unlockAt            DateTime?
  unlockScheduledAt   DateTime?
  lockTransactionHash String?
  isStaked            Boolean            @default(false)
  stakedAt            DateTime?
  unstakeScheduledAt  DateTime?
  unstakedAt          DateTime?
  collection          CollectionContract @relation(fields: [collectionId], references: [id])
  network             BlockchainNetwork  @relation(fields: [networkId], references: [id])
  events              NFTEvent[]
  stakeRewardLogs     StakeRewardLog[]   @relation("StakeRewardLog")

  @@unique([collectionId, tokenId])
  @@index([collectionId, tokenId])
  @@index([tokenId])
  @@index([currentOwnerAddress])
  @@index([ownerAddress])
  @@index([isStaked, stakedAt])
  @@index([isListed])
  @@index([mintedAt])
}

model CollectionParticipant {
  id                String                    @id @default(cuid())
  type              CollectionParticipantType
  userId            String
  collectionAddress String
  createdAt         DateTime                  @default(now())
  collection        CollectionContract        @relation(fields: [collectionAddress], references: [address])
  user              User                      @relation(fields: [userId], references: [id])

  @@unique([userId, collectionAddress, type])
  @@index([collectionAddress, type])
}

model StakeReward {
  id                String             @id @default(cuid())
  assetId           String
  amount            Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  stakeDuration     BigInt
  collectionAddress String
  asset             Asset              @relation("StakeReward", fields: [assetId], references: [id])
  collection        CollectionContract @relation("StakeReward", fields: [collectionAddress], references: [address])
  stakeRewardLogs   StakeRewardLog[]   @relation("StakeRewardLog")
}

model StakeRewardLog {
  id            String      @id @default(cuid())
  stakeRewardId String
  nftId         String
  amount        Int
  isDistributed Boolean     @default(false)
  distributedAt DateTime?
  isClaimed     Boolean     @default(false)
  claimedAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  assetId       String
  asset         Asset       @relation("StakeRewardLog", fields: [assetId], references: [id])
  nft           NFT         @relation("StakeRewardLog", fields: [nftId], references: [id])
  stakeReward   StakeReward @relation("StakeRewardLog", fields: [stakeRewardId], references: [id])

  @@index([stakeRewardId])
  @@index([nftId])
}

model NFTEvent {
  id              String             @id @default(cuid())
  nftId           String
  collectionId    String
  eventType       String
  fromAddress     String?
  toAddress       String?
  price           String?
  transactionHash String
  timestamp       DateTime           @default(now())
  blockNumber     Int?
  collection      CollectionContract @relation(fields: [collectionId], references: [id])
  nft             NFT                @relation(fields: [nftId], references: [id])

  @@index([nftId])
  @@index([eventType])
  @@index([fromAddress, toAddress])
}

model Artist {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  imageUrl            String?
  externalUrl         String?
  reportUrl           String?
  company             String?
  sns                 String[]             @default([])
  gallery             String[]             @default([])
  videos              String[]             @default([])
  music               String[]             @default([])
  events              String[]             @default([])
  additionalInfo      Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  logoUrl             String?
  backgroundColors    String[]             @default([])
  foregroundColors    String[]             @default([])
  code                String?              @unique
  hidden              Boolean              @default(false)
  order               Int                  @default(0)
  feeds               ArtistFeed[]
  members             ArtistMember[]
  messages            ArtistMessage[]
  assets              Asset[]              @relation("ArtistAssets")
  boards              Board[]              @relation("ArtistBoards")
  collectionContracts CollectionContract[]
  players             Player[]             @relation("PlayerArtist")
  polls               Poll[]               @relation("ArtistPolls")
  quests              Quest[]              @relation("ArtistQuests")
  raffles             Raffle[]             @relation("ArtistRaffles")
  story_spg           Story_spg[]

  @@index([name])
  @@index([code])
}

model ArtistMember {
  id             String    @id @default(cuid())
  artistId       String
  name           String
  role           String
  imageUrl       String?
  externalUrl    String?
  description    String?
  realName       String?
  birthDate      DateTime?
  birthPlace     String?
  nationality    String?
  height         Int?
  weight         Int?
  bloodType      String?
  constellation  String?
  sns            String[]  @default([])
  gallery        String[]  @default([])
  videos         String[]  @default([])
  music          String[]  @default([])
  additionalInfo Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  artist         Artist    @relation(fields: [artistId], references: [id])
}

model ArtistMessage {
  id          String    @id @default(cuid())
  artistId    String
  bannerUrl   String?
  externalUrl String?
  message     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  endDate     DateTime?
  isActive    Boolean   @default(true)
  startDate   DateTime?
  artist      Artist    @relation(fields: [artistId], references: [id])
}

model ArtistFeed {
  id        String               @id @default(cuid())
  artistId  String
  imageUrls String[]
  videoUrls String[]
  text      String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  artist    Artist               @relation(fields: [artistId], references: [id])
  reactions ArtistFeedReaction[]

  @@index([artistId, createdAt])
}

model ArtistFeedReaction {
  id           String     @id @default(cuid())
  artistFeedId String
  playerId     String
  reaction     String
  comment      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  artistFeed   ArtistFeed @relation(fields: [artistFeedId], references: [id])
  player       Player     @relation(fields: [playerId], references: [id])

  @@unique([artistFeedId, playerId, reaction])
}

model Story_spgContract {
  id        String            @id @default(cuid())
  address   String            @unique
  abi       Json?
  bytecode  String?
  txHash    String?
  networkId String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  story_spg Story_spg[]
  network   BlockchainNetwork @relation(fields: [networkId], references: [id])

  @@index([networkId])
}

model TBAContract {
  id         String            @id @default(cuid())
  address    String            @unique
  type       TBAContractType
  name       String?
  version    String?
  abi        Json?
  bytecode   String?
  txHash     String?
  deployedBy String?
  networkId  String
  isActive   Boolean           @default(true)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  network    BlockchainNetwork @relation(fields: [networkId], references: [id])

  @@unique([networkId, type, address])
  @@index([networkId, type, isActive])
}

model Story_spg {
  id                       String             @id @default(cuid())
  address                  String             @unique
  contractURI              String
  name                     String             @unique
  symbol                   String             @unique
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  networkId                String
  ownerAddress             String
  artistId                 String?
  contractAddress          String?
  baseURI                  String
  backgroundColor          String?
  circulation              Int                @default(1000)
  foregroundColor          String?
  glowEnd                  DateTime?
  glowStart                DateTime?
  pageImages               String[]
  preOrderEnd              DateTime?
  preOrderStart            DateTime?
  price                    Int                @default(0)
  saleEnd                  DateTime?
  saleStart                DateTime?
  isListed                 Boolean            @default(false)
  imageUrl                 String?
  metadata                 Json?
  reportUrl                String?
  sharePercentage          Float              @default(0.0)
  tbaImplementationAddress String?
  tbaRegistryAddress       String?
  comingSoon               Boolean            @default(false)
  hiddenDetails            Boolean            @default(false)
  rafflePrizes             RafflePrize[]      @relation("RafflePrizeSPG")
  story_nfts               Story_nft[]
  artist                   Artist?            @relation(fields: [artistId], references: [id])
  contract                 Story_spgContract? @relation(fields: [contractAddress], references: [address])
  network                  BlockchainNetwork  @relation(fields: [networkId], references: [id])

  @@index([networkId])
  @@index([ownerAddress, networkId])
  @@index([artistId])
  @@index([tbaRegistryAddress])
  @@index([tbaImplementationAddress])
}

model Story_nft {
  id              String            @id @default(cuid())
  tokenId         String
  contractAddress String
  ownerAddress    String
  networkId       String
  tokenURI        String
  mintTxHash      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  tokenURICid     String
  ipId            String?
  spgCollection   Story_spg         @relation(fields: [contractAddress], references: [address])
  ipAsset         Story_ipAsset?    @relation(fields: [ipId], references: [ipId])
  network         BlockchainNetwork @relation(fields: [networkId], references: [id])

  @@unique([contractAddress, tokenId])
  @@index([ownerAddress])
  @@index([networkId])
  @@index([ipId])
}

model Story_ipAsset {
  id                 String            @id @default(cuid())
  ipId               String            @unique
  chainId            String
  tokenContract      String
  tokenId            String
  ipMetadataURI      String?
  ipMetadataHash     String?
  nftMetadataURI     String?
  nftMetadataHash    String?
  registrationTxHash String?
  licenseTermsId     String?
  licenseTermsURI    String?
  networkId          String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  network            BlockchainNetwork @relation(fields: [networkId], references: [id])
  nfts               Story_nft[]

  @@unique([chainId, tokenContract, tokenId])
  @@index([networkId])
}

model TweetAuthor {
  id              String                @id @default(cuid())
  authorId        String                @unique
  name            String?
  username        String?
  profileImageUrl String?
  blacklistedAt   DateTime?
  isBlacklisted   Boolean               @default(false)
  registered      Boolean               @default(false)
  registeredAt    DateTime?
  validated       Boolean               @default(false)
  validatedAt     DateTime?
  player          Player?               @relation("PlayerToTweetAuthor")
  rewardsLogs     RewardsLog[]
  tweets          Tweet[]
  blacklistData   TweetAuthorBlacklist?
  metrics         TweetAuthorMetrics[]

  @@index([isBlacklisted])
}

model TweetAuthorMetrics {
  id             String      @id @default(cuid())
  tweetAuthorId  String
  followersCount Int
  followingCount Int
  tweetCount     Int
  listedCount    Int
  verified       Boolean     @default(false)
  recordedAt     DateTime    @default(now())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tweetAuthor    TweetAuthor @relation(fields: [tweetAuthorId], references: [authorId])

  @@index([tweetAuthorId])
}

model TweetAuthorBlacklist {
  id          String      @id @default(cuid())
  authorId    String      @unique
  reason      String?
  tweetCount  Int         @default(0)
  periodStart DateTime?
  periodEnd   DateTime?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  author      TweetAuthor @relation(fields: [authorId], references: [authorId])

  @@index([isActive])
}

model Tweet {
  id                    String         @id @default(cuid())
  tweetId               String         @unique
  text                  String
  authorId              String
  createdAt             DateTime       @default(now())
  authorName            String?
  authorProfileImageUrl String?
  authorUsername        String?
  deletedAt             DateTime?
  isDeleted             Boolean        @default(false)
  updatedAt             DateTime       @updatedAt
  author                TweetAuthor    @relation(fields: [authorId], references: [authorId])
  media                 TweetMedia[]
  metricsHistory        TweetMetrics[]

  @@index([authorId])
  @@index([createdAt])
  @@index([isDeleted])
}

model TweetMetrics {
  id           String   @id @default(cuid())
  tweetId      String
  replyCount   Int
  retweetCount Int
  likeCount    Int
  quoteCount   Int
  recordedAt   DateTime @default(now())
  tweet        Tweet    @relation(fields: [tweetId], references: [tweetId])

  @@index([tweetId, recordedAt])
  @@index([recordedAt])
}

model TweetMedia {
  id              String   @id @default(cuid())
  mediaKey        String   @unique
  tweetId         String
  type            String
  url             String?
  previewImageUrl String?
  width           Int?
  height          Int?
  durationMs      Int?
  altText         String?
  createdAt       DateTime @default(now())
  tweet           Tweet    @relation(fields: [tweetId], references: [tweetId])

  @@index([tweetId])
}

model TweetSyncData {
  id                 Int             @id @default(autoincrement())
  lastTweetId        String?
  lastSyncAt         DateTime        @default(now())
  syncStatus         String          @default("success")
  errorMessage       String?
  totalTweetsFound   Int             @default(0)
  newTweetsAdded     Int             @default(0)
  apiRequestsUsed    Int             @default(0)
  rateLimitRemaining Int?
  executionTimeMs    Int?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  tweetResponses     TweetResponse[]

  @@index([lastSyncAt])
}

model TweetResponse {
  id               String        @id @default(cuid())
  tweetSyncDataId  Int
  rawResponse      Json
  requestParams    Json
  responseCode     Int
  requestTimestamp DateTime      @default(now())
  processingTimeMs Int?
  tweetSyncData    TweetSyncData @relation(fields: [tweetSyncDataId], references: [id], onDelete: Cascade)

  @@index([tweetSyncDataId])
  @@index([requestTimestamp])
}

model XAuthSession {
  id           String   @id @default(cuid())
  state        String   @unique
  codeVerifier String
  playerId     String
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  @@index([expiresAt])
}

model BoardModerationRule {
  id        String                  @id @default(cuid())
  category  String
  stopWords String[]
  isActive  Boolean                 @default(true)
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  reports   BoardModerationReport[]
}

model BoardModerationReport {
  id            String                      @id @default(cuid())
  boardId       String
  postId        String?
  commentId     String?
  reporterId    String?
  offenderId    String?
  relatedRuleId String?
  reason        String?
  type          BoardModerationReportType   @default(UNKNOWN)
  status        BoardModerationReportStatus @default(PENDING)
  reviewResult  String?
  reviewAt      DateTime?
  reviewBy      String?
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  board         Board                       @relation(fields: [boardId], references: [id])
  comment       BoardComment?               @relation(fields: [commentId], references: [id])
  offender      Player?                     @relation("BoardModerationReportOffender", fields: [offenderId], references: [id])
  post          BoardPost?                  @relation(fields: [postId], references: [id])
  relatedRule   BoardModerationRule?        @relation(fields: [relatedRuleId], references: [id])
  reporter      Player?                     @relation("BoardModerationReportReporter", fields: [reporterId], references: [id])

  @@unique([reporterId, boardId, postId, commentId])
  @@index([status, createdAt])
  @@index([type, createdAt])
  @@index([reporterId, createdAt])
  @@index([offenderId, createdAt])
  @@index([relatedRuleId, createdAt])
  @@index([boardId, createdAt])
  @@index([postId, createdAt])
  @@index([commentId, createdAt])
}

model BoardModerationTrustLevelAction {
  id                                    String   @id @default(cuid())
  trustLevel                            Int      @unique @default(0)
  reputationScore                       Int      @default(0)
  postPerDay                            Int      @default(5)
  commentPerDay                         Int      @default(10)
  syllableLimit                         Int      @default(1000)
  linkPerPostLimit                      Int      @default(0)
  attachmentPerPostLimit                Int      @default(3)
  isActive                              Boolean  @default(true)
  increaseReputationScoreByCleanPost    Int      @default(3)
  increaseReputationScoreByCleanComment Int      @default(1)
  increaseReputationScoreByReportedPost Int      @default(1)
  createdAt                             DateTime @default(now())
  updatedAt                             DateTime @updatedAt
}

model Board {
  id                          String                  @id @default(cuid())
  name                        String
  description                 String?
  artistId                    String?
  isPublic                    Boolean                 @default(true)
  isActive                    Boolean                 @default(true)
  order                       Int                     @default(0)
  iconUrl                     String?
  bannerUrl                   String?
  rules                       String?
  metadata                    Json?
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt
  allowAdminRewards           Boolean                 @default(false)
  allowArtistRewards          Boolean                 @default(false)
  allowTeamRewards            Boolean                 @default(false)
  allowUserRewards            Boolean                 @default(false)
  dailyPostLimit              Int?
  maxRewardPerPost            Int?
  popularPostRewardAmount     Int?
  popularPostRewardAssetId    String?
  popularPostRewardEnabled    Boolean                 @default(false)
  popularPostThreshold        Int?
  postCreationRewardAmount    Int?
  postCreationRewardAssetId   String?
  postCreationRewardEnabled   Boolean                 @default(false)
  qualityContentRewardAmount  Int?
  qualityContentRewardAssetId String?
  qualityContentRewardEnabled Boolean                 @default(false)
  weeklyPostLimit             Int?
  artist                      Artist?                 @relation("ArtistBoards", fields: [artistId], references: [id])
  popularPostRewardAsset      Asset?                  @relation("BoardPopularPostReward", fields: [popularPostRewardAssetId], references: [id])
  postCreationRewardAsset     Asset?                  @relation("BoardPostCreationReward", fields: [postCreationRewardAssetId], references: [id])
  qualityContentRewardAsset   Asset?                  @relation("BoardQualityContentReward", fields: [qualityContentRewardAssetId], references: [id])
  reports                     BoardModerationReport[]
  posts                       BoardPost[]

  @@index([artistId, isActive])
  @@index([isPublic, isActive, order])
}

model BoardPost {
  id                   String                  @id @default(cuid())
  boardId              String
  authorId             String?
  authorType           BoardAuthorType         @default(PLAYER)
  title                String
  content              String
  imageUrls            String[]                @default([])
  videoUrls            String[]                @default([])
  attachmentUrls       String[]                @default([])
  nftAddress           String?
  nftTokenId           String?
  tags                 String[]                @default([])
  isPinned             Boolean                 @default(false)
  isHidden             Boolean                 @default(false)
  viewCount            Int                     @default(0)
  likeCount            Int                     @default(0)
  dislikeCount         Int                     @default(0)
  recommendCount       Int                     @default(0)
  commentCount         Int                     @default(0)
  shareCount           Int                     @default(0)
  metadata             Json?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  files                Json[]                  @default([])
  isSandbox            Boolean                 @default(false)
  isSandboxBoardArtist Boolean                 @default(false)
  sandboxImgUrl        String?
  sandboxNickname      String?
  comments             BoardComment[]
  reports              BoardModerationReport[]
  author               Player?                 @relation("BoardPostAuthor", fields: [authorId], references: [id])
  board                Board                   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  rewards              BoardPostReward[]
  reactions            BoardReaction[]

  @@index([boardId, isPinned, createdAt])
  @@index([authorId, createdAt])
  @@index([authorType, createdAt])
  @@index([recommendCount, createdAt])
  @@index([boardId, isHidden, isPinned])
}

model BoardComment {
  id                   String                  @id @default(cuid())
  postId               String
  authorId             String?
  authorType           BoardAuthorType         @default(PLAYER)
  content              String
  parentId             String?
  imageUrls            String[]                @default([])
  isHidden             Boolean                 @default(false)
  likeCount            Int                     @default(0)
  dislikeCount         Int                     @default(0)
  replyCount           Int                     @default(0)
  metadata             Json?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  files                Json[]                  @default([])
  isSandbox            Boolean                 @default(false)
  isSandboxBoardArtist Boolean                 @default(false)
  sandboxImgUrl        String?
  sandboxNickname      String?
  author               Player?                 @relation("BoardCommentAuthor", fields: [authorId], references: [id])
  parent               BoardComment?           @relation("CommentReplies", fields: [parentId], references: [id])
  replies              BoardComment[]          @relation("CommentReplies")
  post                 BoardPost               @relation(fields: [postId], references: [id], onDelete: Cascade)
  reports              BoardModerationReport[]
  reactions            BoardReaction[]

  @@index([postId, parentId, createdAt])
  @@index([authorId, createdAt])
  @@index([parentId])
}

model BoardReaction {
  id        String            @id @default(cuid())
  playerId  String?
  postId    String?
  commentId String?
  type      BoardReactionType
  createdAt DateTime          @default(now())
  comment   BoardComment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  player    Player?           @relation("BoardReactionPlayer", fields: [playerId], references: [id])
  post      BoardPost?        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([playerId, postId, type])
  @@unique([playerId, commentId, type])
  @@index([postId, type])
  @@index([commentId, type])
  @@index([playerId])
}

model BoardPostReward {
  id            String            @id @default(cuid())
  postId        String
  playerId      String
  grantedBy     String?
  grantedByType BoardAuthorType?
  assetId       String?
  amount        Int
  reason        BoardRewardReason
  txHash        String?
  status        BoardRewardStatus @default(PENDING)
  metadata      Json?
  createdAt     DateTime          @default(now())
  processedAt   DateTime?
  asset         Asset?            @relation("BoardPostRewardAsset", fields: [assetId], references: [id])
  grantedByUser Player?           @relation("BoardPostRewardGranter", fields: [grantedBy], references: [id])
  player        Player            @relation("BoardPostRewardPlayer", fields: [playerId], references: [id])
  post          BoardPost         @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId, status])
  @@index([playerId, status])
  @@index([grantedBy, createdAt])
  @@index([reason, status])
}

model Raffle {
  id                  String              @id @default(cuid())
  title               String
  description         String?
  imgUrl              String?
  startDate           DateTime            @default(now())
  endDate             DateTime
  drawDate            DateTime?
  instantReveal       Boolean             @default(true)
  displayType         String              @default("GACHA")
  maxParticipants     Int?
  entryFeeAssetId     String?
  entryFeeAmount      Int                 @default(0)
  allowMultipleEntry  Boolean             @default(false)
  isPublic            Boolean             @default(true)
  isActive            Boolean             @default(true)
  artistId            String?
  totalSlots          Int                 @default(0)
  totalParticipants   Int                 @default(0)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  isLimited           Boolean             @default(true)
  maxEntriesPerPlayer Int?
  artist              Artist?             @relation("ArtistRaffles", fields: [artistId], references: [id])
  entryFeeAsset       Asset?              @relation("RaffleEntryFeeAsset", fields: [entryFeeAssetId], references: [id])
  participants        RaffleParticipant[]
  prizes              RafflePrize[]
  winners             RaffleWinner[]
  rewardLogs          RewardsLog[]

  @@index([startDate, endDate])
  @@index([artistId])
  @@index([isActive, isPublic])
  @@index([displayType])
}

model RafflePrize {
  id           String              @id @default(cuid())
  raffleId     String
  title        String
  description  String?
  imageUrl     String?
  order        Int                 @default(0)
  quantity     Int
  prizeType    RafflePrizeType
  assetId      String?
  assetAmount  Int?
  spgAddress   String?
  nftQuantity  Int?
  isActive     Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  rarityOrder  Int?                @default(9)
  rarityTier   RarityTier?         @default(COMMON)
  participants RaffleParticipant[]
  asset        Asset?              @relation("RafflePrizeAsset", fields: [assetId], references: [id])
  raffle       Raffle              @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  spg          Story_spg?          @relation("RafflePrizeSPG", fields: [spgAddress], references: [address])
  winners      RaffleWinner[]

  @@index([raffleId, order])
  @@index([raffleId, isActive])
  @@index([prizeType])
  @@index([quantity])
}

model RaffleParticipant {
  id         String       @id @default(cuid())
  raffleId   String
  playerId   String
  prizeId    String?
  drawnAt    DateTime?
  revealedAt DateTime?
  isRevealed Boolean      @default(false)
  slotNumber Int?
  randomSeed String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  player     Player       @relation(fields: [playerId], references: [id], onDelete: Cascade)
  prize      RafflePrize? @relation(fields: [prizeId], references: [id])
  raffle     Raffle       @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  rewardLogs RewardsLog[]

  @@index([playerId])
  @@index([drawnAt])
  @@index([revealedAt])
  @@index([raffleId, playerId])
}

model RaffleWinner {
  id              String            @id @default(cuid())
  raffleId        String
  prizeId         String
  playerId        String
  status          RafflePrizeStatus @default(PENDING)
  distributedAt   DateTime?
  transactionHash String?
  failureReason   String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  player          Player            @relation(fields: [playerId], references: [id], onDelete: Cascade)
  prize           RafflePrize       @relation(fields: [prizeId], references: [id])
  raffle          Raffle            @relation(fields: [raffleId], references: [id], onDelete: Cascade)

  @@index([raffleId])
  @@index([playerId])
  @@index([status])
  @@index([distributedAt])
}

model OnchainRaffleContract {
  id           String            @id @default(cuid())
  address      String            @unique
  txHash       String            @unique
  deployedBy   String
  blockNumber  Int?
  isActive     Boolean           @default(true)
  networkId    String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  raffles      OnchainRaffle[]
  escrowWallet EscrowWallet      @relation(fields: [deployedBy], references: [address])
  network      BlockchainNetwork @relation(fields: [networkId], references: [id])

  @@index([networkId])
  @@index([isActive])
}

model OnchainRaffle {
  id                    String                @id @default(cuid())
  contractAddress       String
  raffleId              String
  txHash                String
  blockNumber           Int?
  networkId             String
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deployedBy            String
  onchainRaffleContract OnchainRaffleContract @relation(fields: [contractAddress], references: [address])
  escrowWallet          EscrowWallet          @relation(fields: [deployedBy], references: [address])
  network               BlockchainNetwork     @relation(fields: [networkId], references: [id])

  @@unique([contractAddress, raffleId])
  @@index([contractAddress])
  @@index([networkId])
  @@index([isActive])
  @@index([raffleId])
}

model OnchainRafflePrizeDistribution {
  id              String            @id @default(cuid())
  contractAddress String
  raffleId        String
  resultId        Int               // 스마트 컨트랙트의 고유 결과 ID
  
  // 배치 처리 관련
  batchId         String
  chunkId         String            @default("0")
  
  // 상품 정보
  prizeIndex      Int
  prizeType       Int               // 1=ASSET, 2=NFT, 3=EMPTY  
  assetId         String?
  spgAddress      String?
  tokenAddress    String?
  amount          Int?
  
  // 플레이어 정보 (관계 없이 직접 저장)
  playerId        String
  playerAddress   String            // 지갑 주소 스냅샷
  
  // 처리 상태
  status          RafflePrizeStatus @default(PENDING)
  retryCount      Int               @default(0)
  maxRetries      Int               @default(3)
  
  // 시간 추적
  createdAt       DateTime          @default(now())
  processedAt     DateTime?
  distributedAt   DateTime?
  lastRetryAt     DateTime?
  
  // 결과 추적
  transactionHash String?
  failureReason   String?
  gasUsed         String?
  
  @@unique([contractAddress, raffleId, resultId])
  @@index([status, createdAt])           // cron 작업용
  @@index([batchId, chunkId])            // 배치 처리용
  @@index([contractAddress, raffleId])   // 래플별 조회용
  @@index([status, retryCount])          // 재시도 대상 조회용
  @@index([playerId])                    // 플레이어별 조회용
}

model PollBettingSettlementLog {
  id                    String                      @id @default(cuid())
  pollId                String
  settlementType        PollBettingSettlementType   @default(AUTO)
  winningOptionIds      String[]                    @default([])
  totalPayout           Int                         @default(0)
  totalWinners          Int                         @default(0)
  totalBettingPool      Int                         @default(0)
  houseCommission       Int                         @default(0)
  houseCommissionRate   Float                       @default(0.05)
  optionResults         Json?
  payoutDistribution    Json?
  settlementRule        Json?
  tieBreakApplied       String?
  tieCount              Int?
  status                PollBettingSettlementStatus @default(SUCCESS)
  isManual              Boolean                     @default(false)
  processedBy           String?
  processingTimeMs      Int?
  errorMessage          String?
  errorDetails          Json?
  retryCount            Int                         @default(0)
  metadata              Json?
  alertsSent            String[]                    @default([])
  settlementStartedAt   DateTime                    @default(now())
  settlementCompletedAt DateTime?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  poll                  Poll                        @relation(fields: [pollId], references: [id])

  @@index([pollId])
  @@index([settlementType, status])
  @@index([createdAt])
  @@index([status, isManual])
  @@index([processedBy, createdAt])
}

model UserNotification {
  id             String                 @id @default(cuid())
  playerId       String
  type           NotificationType
  category       NotificationCategory   @default(GENERAL)
  title          String
  message        String
  description    String?
  actionType     NotificationActionType @default(NONE)
  actionUrl      String?
  actionData     Json?
  entityType     String?
  entityId       String?
  entityData     Json?
  betAmount      Float?
  winAmount      Float?
  rewardAmount   Float?
  priority       NotificationPriority   @default(MEDIUM)
  status         NotificationStatus     @default(PENDING)
  isRead         Boolean                @default(false)
  readAt         DateTime?
  isSent         Boolean                @default(false)
  sentAt         DateTime?
  sentChannels   String[]               @default([])
  failedChannels String[]               @default([])
  iconUrl        String?
  imageUrl       String?
  badgeCount     Int?                   @default(0)
  showBadge      Boolean                @default(false)
  scheduledAt    DateTime?
  expiresAt      DateTime?
  metadata       Json?
  tags           String[]               @default([])
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  player         Player                 @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId, isRead, createdAt])
  @@index([playerId, type, createdAt])
  @@index([playerId, category, createdAt])
  @@index([type, status, createdAt])
  @@index([scheduledAt, status])
  @@index([expiresAt])
  @@index([entityType, entityId])
  @@index([entityType, type])
  @@index([playerId, entityType, createdAt])
  @@map("user_notifications")
}

model NotificationSettings {
  id                     String   @id @default(cuid())
  playerId               String   @unique
  inAppEnabled           Boolean  @default(true)
  pushEnabled            Boolean  @default(true)
  emailEnabled           Boolean  @default(false)
  smsEnabled             Boolean  @default(false)
  telegramEnabled        Boolean  @default(false)
  discordEnabled         Boolean  @default(false)
  bettingEnabled         Boolean  @default(true)
  bettingSuccessEnabled  Boolean  @default(true)
  bettingResultEnabled   Boolean  @default(true)
  bettingPayoutEnabled   Boolean  @default(true)
  pollEnabled            Boolean  @default(true)
  pollEndingEnabled      Boolean  @default(true)
  pollResultEnabled      Boolean  @default(true)
  pollNewEnabled         Boolean  @default(true)
  questEnabled           Boolean  @default(true)
  questCompleteEnabled   Boolean  @default(true)
  questRewardEnabled     Boolean  @default(true)
  questNewEnabled        Boolean  @default(true)
  raffleEnabled          Boolean  @default(true)
  raffleResultEnabled    Boolean  @default(true)
  raffleNewEnabled       Boolean  @default(true)
  boardEnabled           Boolean  @default(true)
  boardCommentEnabled    Boolean  @default(true)
  boardReactionEnabled   Boolean  @default(true)
  boardRewardEnabled     Boolean  @default(true)
  artistEnabled          Boolean  @default(true)
  artistFeedEnabled      Boolean  @default(true)
  artistMessageEnabled   Boolean  @default(true)
  assetEnabled           Boolean  @default(true)
  assetRewardEnabled     Boolean  @default(true)
  assetTransferEnabled   Boolean  @default(false)
  nftEnabled             Boolean  @default(true)
  nftMintEnabled         Boolean  @default(true)
  nftTransferEnabled     Boolean  @default(false)
  socialEnabled          Boolean  @default(true)
  referralEnabled        Boolean  @default(true)
  followEnabled          Boolean  @default(true)
  systemEnabled          Boolean  @default(true)
  maintenanceEnabled     Boolean  @default(true)
  updateEnabled          Boolean  @default(true)
  securityEnabled        Boolean  @default(true)
  doNotDisturbEnabled    Boolean  @default(false)
  doNotDisturbStart      String?
  doNotDisturbEnd        String?
  doNotDisturbDays       String[] @default([])
  maxDailyNotifications  Int?     @default(50)
  maxHourlyNotifications Int?     @default(10)
  enableDigestMode       Boolean  @default(false)
  digestFrequency        String   @default("DAILY")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  player                 Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model NotificationStats {
  id           String   @id @default(cuid())
  date         DateTime @unique @default(now()) @db.Date
  totalSent    Int      @default(0)
  totalRead    Int      @default(0)
  totalClicked Int      @default(0)
  totalFailed  Int      @default(0)
  inAppSent    Int      @default(0)
  pushSent     Int      @default(0)
  emailSent    Int      @default(0)
  telegramSent Int      @default(0)
  bettingCount Int      @default(0)
  pollCount    Int      @default(0)
  questCount   Int      @default(0)
  raffleCount  Int      @default(0)
  socialCount  Int      @default(0)
  systemCount  Int      @default(0)
  openRate     Float?
  clickRate    Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("notification_stats")
}

model PlayerAssetsStatus {
  id String @id @default(cuid())
  assetId String
  totalBalance Int @default(0)
  rewardedCount Int @default(0)
  date DateTime @default(now()) @db.Date

  dailyActivityWalletId String?
  dailyActivityWallet DailyActivityWallet? @relation(fields: [dailyActivityWalletId], references: [id])

  monthlyActivityWalletId String?
  monthlyActivityWallet MonthlyActivityWallet? @relation(fields: [monthlyActivityWalletId], references: [id])

  @@unique([assetId, date])
  @@unique([assetId, dailyActivityWalletId])
  @@unique([assetId, monthlyActivityWalletId])
  @@index([date])
  @@index([assetId])
}

model DailyActivityWallet {
  id String @id @default(cuid())
  date DateTime @unique @default(now()) @db.Date
  activeWallets Int @default(0)
  newWallets Int @default(0)
  returningWallets Int @default(0)
  totalWallets Int @default(0)

  pollParticipationCount Int @default(0)
  questParticipationCount Int @default(0)
  raffleParticipationCount Int @default(0)

  playerAssetsStatus PlayerAssetsStatus[]


  @@index([date])
}

model MonthlyActivityWallet {
  id String @id @default(cuid())
  date DateTime @unique @default(now()) @db.Date
  activeWallets Int @default(0)
  newWallets Int @default(0)
  returningWallets Int @default(0)

  totalWallets Int @default(0)

  pollParticipationCount Int @default(0)
  questParticipationCount Int @default(0)
  raffleParticipationCount Int @default(0)

  playerAssetsStatus PlayerAssetsStatus[]

  @@index([date])
}

enum QuestLogStatus {
  PENDING
  PROCESSING
  COMPLETED
  RECLAIMABLE
  CLAIMED
  FAILED
  DEPRECATED
}

enum AssetInstanceStatus {
  PENDING
  RECEIVED
  RECEIVED_EXPIRED
  USED
  EXPIRED
  EXCHANGED
  CANCELLED
  DESTROYED
}

enum BoardModerationReportStatus {
  PENDING
  REVIEWING
  DISMISSED
  RESOLVED
  WARNED
  BANNED
  HIDDEN
  DELETED
}

enum BoardModerationReportType {
  UNKNOWN
  AUTO_RULE
  SPAM_DETECTION
  AI_FLAGGED
  USER_REPORT
  MODERATOR_REPORT
}

enum PlayerAssetStatus {
  ACTIVE
  INACTIVE
  DELETED
  FROZEN
}

enum QuestType {
  URL
  REFERRAL
}

enum PollStatus {
  UPCOMING
  ACTIVE
  ENDED
  CANCELLED
  CALCULATING_RESULTS
}

enum PollCategory {
  PUBLIC
  PRIVATE
}

enum AssetType {
  ONCHAIN
  OFFCHAIN
}

enum CollectionParticipantType {
  PREREGISTRATION
  PRESALE
  PRIVATESALE
  PUBLICSALE
  GLOW
}

enum TBAContractType {
  REGISTRY
  IMPLEMENTATION
}

enum PaymentStatus {
  PENDING
  AWAITING_DEPOSIT
  PAID
  CANCELLED
  FAILED
  EXPIRED
  PARTIALLY_CANCELLED
  REFUNDED
  COMPLETED
}

enum PaymentPromotionDiscountType {
  percentage
  amount
}

enum RewardCurrency {
  points
  SGP
  SGT
}

enum EventCategory {
  concert
  fanmeeting
  fancamp
  festival
  exhibition
  other
}

enum EventStatus {
  upcoming
  ongoing
  completed
  cancelled
}

enum WalletStatus {
  ACTIVE
  INACTIVE
  LOCKED
}

enum MetadataType {
  collection
  nft
}

enum BoardAuthorType {
  PLAYER
  ARTIST
  TEAM
  ADMIN
}

enum BoardReactionType {
  LIKE
  DISLIKE
  LOVE
  LAUGH
  ANGRY
  SAD
  RECOMMEND
}

enum BoardRewardReason {
  POST_CREATION
  POPULAR_POST
  QUALITY_CONTENT
  COMMUNITY_CONTRIBUTION
  ARTIST_REWARD
  TEAM_REWARD
  MILESTONE_ACHIEVEMENT
}

enum BoardRewardStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum RafflePrizeType {
  ASSET
  NFT
  EMPTY
}

enum RafflePrizeStatus {
  PENDING
  PROCESSING
  DISTRIBUTED
  CLAIMED
  FAILED
  EXPIRED
}

enum RarityTier {
  COSMIC
  STELLAR
  CELESTIAL
  DIVINE
  LEGENDARY
  EPIC
  RARE
  UNCOMMON
  COMMON
}

enum BettingStatus {
  OPEN
  CLOSED
  SETTLING
  SETTLED
  CANCELLED
}

enum PollBettingSettlementType {
  AUTO
  MANUAL
  REFUND
  EMERGENCY
}

enum PollBettingSettlementStatus {
  SUCCESS
  FAILED
  PARTIAL
  PENDING
  CANCELLED
}

enum NotificationType {
  BETTING_SUCCESS
  BETTING_FAILED
  POLL_BETTING_WIN
  POLL_BETTING_LOSE
  POLL_BETTING_PAYOUT
  POLL_BETTING_REFUND
  POLL_STARTED
  POLL_ENDING_SOON
  POLL_ENDED
  POLL_RESULT_ANNOUNCED
  POLL_PARTICIPATION_REWARD
  QUEST_AVAILABLE
  QUEST_REMINDER
  QUEST_COMPLETED
  QUEST_REWARD_RECEIVED
  QUEST_EXPIRING_SOON
  RAFFLE_NEW
  RAFFLE_ENTRY_CONFIRMED
  RAFFLE_DRAWING_SOON
  RAFFLE_RESULT_AVAILABLE
  RAFFLE_WIN
  RAFFLE_PRIZE_DISTRIBUTED
  BOARD_POST_COMMENT
  BOARD_POST_REACTION
  BOARD_COMMENT_REPLY
  BOARD_POST_REWARD
  BOARD_MENTION
  ARTIST_NEW_FEED
  ARTIST_NEW_MESSAGE
  ARTIST_LIVE_EVENT
  ARTIST_SPECIAL_CONTENT
  ASSET_RECEIVED
  ASSET_SENT
  ASSET_STAKING_REWARD
  ASSET_BALANCE_LOW
  NFT_MINTED
  NFT_TRANSFERRED
  NFT_STAKING_REWARD
  NFT_COLLECTION_NEW
  REFERRAL_JOINED
  REFERRAL_REWARD
  ACHIEVEMENT_UNLOCKED
  LEVEL_UP
  SYSTEM_MAINTENANCE
  SYSTEM_UPDATE
  ACCOUNT_SECURITY
  TERMS_UPDATED
  PROMOTIONAL
  EVENT_STARTED
  EVENT_ENDING_SOON
  EVENT_REWARD
  GENERAL_INFO
  WELCOME
  BIRTHDAY
  SETTLEMENT_COMPLETE
}

enum NotificationCategory {
  BETTING
  POLLS
  QUESTS
  RAFFLES
  SOCIAL
  ASSETS
  NFTS
  ARTISTS
  BOARDS
  EVENTS
  SYSTEM
  GENERAL
}

enum NotificationActionType {
  NONE
  OPEN_APP
  OPEN_URL
  OPEN_POLL
  OPEN_QUEST
  OPEN_RAFFLE
  OPEN_BOARD_POST
  OPEN_ARTIST_FEED
  OPEN_WALLET
  OPEN_NFT_COLLECTION
  OPEN_SETTINGS
  CLAIM_REWARD
  PARTICIPATE_POLL
  PARTICIPATE_RAFFLE
  VIEW_RESULT
}

enum NotificationPriority {
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum NotificationStatus {
  PENDING
  SCHEDULED
  SENDING
  SENT
  FAILED
  CANCELLED
  EXPIRED
}
