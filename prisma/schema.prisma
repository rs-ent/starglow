/// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  providerId    String?
  role          String    @default("user")
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  lastLoginAt   DateTime?
  player        Player?
}

model Wallet {
  id            String    @id @default(cuid())
  userId        String    // foreign key
  address       String    @unique
  privateKey    String
  network       String
  createdAt     DateTime  @default(now())
  primary       Boolean   @default(false)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Player {
  id                 String    @id @default(cuid()) @map("id")
  userId             String?   @unique
  telegramId         String?   @unique @map("telegramId")
  name               String?   @map("name")
  gameMoney          Int       @default(0) @map("gameMoney")
  usedCashMoney      Int       @default(0) @map("usedCashMoney")
  starPurchased      Int       @default(0) @map("starPurchased")
  vipUntil           DateTime? @map("vipUntil")
  recommendedCount   Int       @default(0) @map("recommendedCount")
  recommenderId      String?   
  recommenderName    String?
  recommenderMethod  String?
  raffleTickets      Int       @default(0) @map("raffleTickets")
  createdAt          DateTime  @default(now())
  lastConnectedAt    DateTime  @updatedAt
  
  missionLogs        MissionLog[]
  gameMoneyLogs      GameMoneyLog[]

  user               User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Player")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CurrencyType {
  Points
  SGP
  SGT
}

model GameMoneyLog {
  id            String    @id @default(cuid())
  playerId      String
  Price         Int       @default(0)
  Currency      CurrencyType? @default(Points) @map("Currency")
  createdAt     DateTime  @default(now())

  player        Player    @relation(fields: [playerId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Daily_Quests {
  id          String  @id @default(cuid())
  Date        String?
  Quest_Type  String? @map("Quest Type")
  poll_id     String
  Quest_Title String? @map("Quest Title")
  URL         String?
  Price       Int?    @default(800)
  Currency    CurrencyType? @default(Points) @map("Currency")

  @@map("Daily Quests")
}

enum QuestType {
  Daily
  General
}

model MissionLog {
  id            String   @id @default(cuid())
  playerId      String
  missionId     String
  type          QuestType
  Quest_Title   String?
  Quest_Date    String?
  Quest_Type    String?
  URL           String?
  Price         Int?
  Currency      String?
  completedAt   DateTime @default(now())

  player        Player   @relation(fields: [playerId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Polls {
  poll_id           String  @id
  title             String?
  title_shorten     String?
  options           String?
  options_shorten   String?
  img               String?
  song_title        String?
  song_img          String?
  start             String?
  end               String?
  announce_today    String?
  announce_result   String?
  show_scheduled    String?
  song_announce_img String?
  poll_announce_img String?
  result_img        String?
  reopen            String?
  group_a           String?
  group_b           String?
  memo              String?
}

model OgImageCache {
  id        String   @id @default(uuid())
  targetUrl String   @unique
  imageUrl  String
  createdAt DateTime @default(now())
}