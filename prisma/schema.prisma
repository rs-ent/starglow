/// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  lastLoginAt   DateTime?

  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  player        Player?

  @@index([lastLoginAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  id         String    @id @default(cuid())
  userId     String
  address    String    @unique
  network    String
  createdAt  DateTime  @default(now())
  default    Boolean   @default(false)
  primary    Int?      @default(0)

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, address])
}

model Player {
  id                 String        @id @default(cuid())
  userId             String        @unique
  telegramId         String?       @unique
  name               String?
  points             Int           @default(0)
  recommendedCount   Int           @default(0)
  recommenderId      String?
  recommenderName    String?
  recommenderMethod  String?
  createdAt          DateTime      @default(now())
  lastConnectedAt    DateTime      @updatedAt

  questLogs          QuestLog[]
  pointsLogs         PointsLog[]
  pollLogs           PollLog[]

  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, telegramId])
}

enum RewardCurrency {
  Points
  SGP
  SGT
}

model Quest {
  id              String              @id @default(cuid())
  title           String
  description     String?
  url             String?
  icon            String?
  rewards         Int                 @default(800)
  rewardCurrency  RewardCurrency      @default(Points)
  startDate       DateTime?    
  endDate         DateTime?
  permanent       Boolean             @default(false)

  questLogs       QuestLog[]
  pointsLogs      PointsLog[]

  @@index([startDate, endDate, permanent])
}

model QuestLog {
  id             String    @id @default(cuid())
  playerId       String
  questId        String
  completed      Boolean   @default(false)
  completedAt    DateTime?

  pointsLogs    PointsLog[]

  player         Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  quest          Quest     @relation(fields: [questId], references: [id])

  @@unique([playerId, questId])
  @@index([playerId, questId, completed])
}

model Poll {
  id                      String    @id @default(cuid())
  title                   String
  titleShorten            String?
  options                 String[]  @default([])
  optionsShorten          String[]  @default([])
  bannerImg               String?
  startDate               DateTime  @default(now())
  endDate                 DateTime  @default(now())
  exposeInScheduleTab     Boolean   @default(false)
  openPromotionText       String?
  openPromotionImg        String?
  resultPromotionText     String?
  resultPromotionImg      String?
  totalVotes              Int       @default(0)
  totalVotesByOption      Int[]     @default([])
  totalBetsAmount         Int       @default(0)
  totalBetsAmountByOption Int[]     @default([])
  results                 Int[]     @default([])
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  pollLogs                PollLog[]
  pointsLogs             PointsLog[]

  @@index([id, startDate, endDate, exposeInScheduleTab])
}

model PollLog {
  id             String    @id @default(cuid())
  playerId       String
  pollId         String
  option         String
  betAmount      Int       @default(0)
  createdAt      DateTime  @default(now())

  pointsLogs    PointsLog[]

  player         Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  poll           Poll      @relation(fields: [pollId], references: [id])

  @@unique([playerId, pollId])
  @@index([playerId, pollId, option])
}

model PointsLog {
  id             String    @id @default(cuid())
  playerId       String
  questId        String?
  questLogId     String?
  pollId        String?
  pollLogId      String?
  amount         Int
  reason         String?
  createdAt      DateTime  @default(now())

  player         Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  quest          Quest?    @relation(fields: [questId], references: [id])
  questLog       QuestLog? @relation(fields: [questLogId], references: [id])
  poll           Poll?     @relation(fields: [pollId], references: [id])
  pollLog        PollLog?  @relation(fields: [pollLogId], references: [id])

  @@index([playerId, createdAt])
}

model StoredImage {
  id           String    @id @default(cuid())
  url          String    @unique @db.VarChar(2048)
  type         String?   @db.VarChar(50)
  sourceUrl    String?   @db.VarChar(2048)
  alt          String?   @db.VarChar(255)
  width        Int?                      
  height       Int?                      
  mimeType     String?   @db.VarChar(50)
  sizeBytes    Int?                     
  metadata     Json?                    
  expiresAt    DateTime?                
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([url, sourceUrl])
  @@unique([sourceUrl, type])
}